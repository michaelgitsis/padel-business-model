<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Padeliko - Business Financial Model</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        :root {
            --primary: #4f46e5;
            --primary-dark: #4338ca;
            --primary-light: #6366f1;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --bg: #ffffff;
            --bg-secondary: #f9fafb;
            --bg-card: #ffffff;
            --text: #111827;
            --text-secondary: #6b7280;
            --text-light: #9ca3af;
            --border: #e5e7eb;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            --shadow-lg: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            --radius: 12px;
        }

        [data-theme="dark"] {
            --bg: #0f172a;
            --bg-secondary: #1e293b;
            --bg-card: #1e293b;
            --text: #f1f5f9;
            --text-secondary: #cbd5e1;
            --text-light: #94a3b8;
            --border: #334155;
            --shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.3);
            --shadow-lg: 0 10px 25px -5px rgba(0, 0, 0, 0.3);
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: var(--bg);
            color: var(--text);
            line-height: 1.6;
            transition: all 0.3s ease;
        }

        .app-container {
            max-width: 100%;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        /* Header */
        .header {
            background: var(--bg-card);
            border-bottom: 1px solid var(--border);
            padding: 1rem 1.5rem;
            box-shadow: var(--shadow);
        }

        .header-content {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 1rem;
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .header-title h1 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--text);
        }

        .header-title i {
            color: var(--primary);
            font-size: 1.5rem;
        }

        .header-actions {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .btn {
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 8px;
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: var(--bg-secondary);
            color: var(--text);
            border: 1px solid var(--border);
        }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: var(--shadow);
        }

        .btn-primary {
            background: var(--primary);
            color: white;
            border: none;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

        .btn-icon {
            padding: 0.5rem;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
        }

        /* Tab Navigation */
        .tab-nav {
            background: var(--bg-card);
            border-bottom: 1px solid var(--border);
            overflow-x: auto;
            -webkit-overflow-scrolling: touch;
        }

        .tab-nav-inner {
            max-width: 1400px;
            margin: 0 auto;
            display: flex;
            padding: 0 1.5rem;
        }

        .tab-btn {
            padding: 1rem 1.5rem;
            background: none;
            border: none;
            border-bottom: 3px solid transparent;
            color: var(--text-secondary);
            font-size: 0.875rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .tab-btn:hover {
            color: var(--text);
            background: var(--bg-secondary);
        }

        .tab-btn.active {
            color: var(--primary);
            border-bottom-color: var(--primary);
        }

        .tab-btn i {
            font-size: 1rem;
        }

        /* Tab Content */
        .tab-content {
            flex: 1;
            padding: 2rem 1.5rem;
            max-width: 1400px;
            margin: 0 auto;
            width: 100%;
        }

        .tab-panel {
            display: none;
            animation: fadeIn 0.3s ease;
        }

        .tab-panel.active {
            display: block;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Dashboard Tab - Key Metrics */
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .metric-card {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 1.5rem;
            transition: all 0.2s;
        }

        .metric-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .metric-label {
            font-size: 0.75rem;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--text-secondary);
            margin-bottom: 0.5rem;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--text);
        }

        .metric-card.positive .metric-value { color: var(--success); }
        .metric-card.negative .metric-value { color: var(--danger); }
        .metric-card.warning .metric-value { color: var(--warning); }

        .metric-change {
            font-size: 0.875rem;
            margin-top: 0.5rem;
            color: var(--text-secondary);
        }

        /* Parameters Tab */
        .parameters-container {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }

        .parameter-section {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 1.5rem;
        }

        .parameter-section h3 {
            font-size: 1rem;
            font-weight: 600;
            color: var(--text);
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .parameter-section h3 i {
            color: var(--primary);
        }

        .parameter {
            margin-bottom: 1.5rem;
        }

        .parameter:last-child {
            margin-bottom: 0;
        }

        .parameter label {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text);
            margin-bottom: 0.5rem;
        }

        .info-btn {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            border: none;
            font-size: 11px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
            flex-shrink: 0;
        }

        .info-btn:hover {
            background: var(--primary-dark);
            transform: scale(1.1);
        }

        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 1000;
        }

        .modal-content {
            background: var(--bg-card);
            border-radius: var(--radius);
            padding: 1.5rem;
            max-width: 500px;
            width: 90%;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: var(--shadow-lg);
            position: relative;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid var(--border);
        }

        .modal-title {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text);
        }

        .modal-close {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: none;
            border: none;
            color: var(--text-secondary);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.2s;
        }

        .modal-close:hover {
            background: var(--bg-secondary);
            color: var(--text);
        }

        .modal-body {
            color: var(--text);
            line-height: 1.6;
        }

        .modal-section {
            margin-bottom: 1rem;
        }

        .modal-section:last-child {
            margin-bottom: 0;
        }

        .modal-section h4 {
            font-size: 0.9rem;
            font-weight: 600;
            color: var(--primary);
            margin-bottom: 0.5rem;
        }

        .sources-list {
            list-style: none;
            padding: 0;
        }

        .sources-list li {
            margin-bottom: 0.5rem;
            font-size: 0.875rem;
        }

        .sources-list a {
            color: var(--primary);
            text-decoration: none;
            word-break: break-word;
        }

        .sources-list a:hover {
            text-decoration: underline;
        }

        .parameter input[type="number"],
        .parameter input[type="range"],
        .parameter input.amount-input {
            width: 100%;
            padding: 0.5rem 0.75rem;
            background: var(--bg-secondary);
            border: 1px solid var(--border);
            border-radius: 6px;
            color: var(--text);
            font-size: 0.875rem;
            transition: all 0.2s;
        }

        .parameter input[type="number"]:focus,
        .parameter input.amount-input:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        .range-container {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .range-container input[type="range"] {
            flex: 1;
            height: 4px;
            background: var(--border);
            outline: none;
            -webkit-appearance: none;
        }

        .range-container input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 16px;
            background: var(--primary);
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.2s;
        }

        .range-container input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.2);
        }

        .range-value {
            min-width: 60px;
            text-align: center;
            font-weight: 600;
            color: var(--primary);
        }


        /* Report Tab */
        .report-section {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 1.5rem;
            margin-bottom: 2rem;
        }

        .report-section h3 {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text);
            margin-bottom: 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .report-section h3 i {
            color: var(--primary);
        }

        .data-table {
            width: 100%;
            border-collapse: collapse;
        }

        .data-table th,
        .data-table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid var(--border);
        }

        .data-table th {
            background: var(--bg-secondary);
            font-weight: 600;
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            color: var(--text-secondary);
        }

        .data-table td {
            font-size: 0.875rem;
            color: var(--text);
        }

        .data-table td.number {
            text-align: left;
            font-family: 'SF Mono', 'Monaco', monospace;
            font-weight: 500;
        }

        .data-table tr:hover {
            background: var(--bg-secondary);
        }

        /* Calculation Breakdown */
        .calculation-breakdown {
            display: grid;
            gap: 1.5rem;
        }

        .breakdown-section {
            background: var(--bg-secondary);
            border-radius: var(--radius);
            padding: 1rem;
        }

        .breakdown-section h4 {
            color: var(--primary);
            margin-bottom: 1rem;
            font-size: 1rem;
            font-weight: 600;
        }

        .parameters-display {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 0.5rem;
        }

        .param-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            background: var(--bg);
            border-radius: 4px;
        }

        .param-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
        }

        .param-value {
            font-size: 0.875rem;
            font-weight: 600;
            color: var(--text);
            font-family: 'SF Mono', 'Monaco', monospace;
        }

        .formula-display {
            display: grid;
            gap: 0.5rem;
        }

        .formula-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            background: var(--bg);
            border-radius: 4px;
        }

        .formula-row.total-row {
            background: var(--primary-light);
            border: 2px solid var(--primary);
        }

        .formula-label {
            font-size: 0.875rem;
            color: var(--text-secondary);
            flex: 1;
        }

        .formula-value {
            font-size: 0.875rem;
            font-weight: 500;
            color: var(--text);
            font-family: 'SF Mono', 'Monaco', monospace;
            text-align: right;
            margin-left: 1rem;
        }

        .breakdown-notice {
            background: var(--warning-light);
            border: 2px solid var(--warning);
            border-radius: var(--radius);
            padding: 1rem;
            margin-top: 1rem;
        }

        .notice-content {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            margin-bottom: 0.5rem;
        }

        .notice-content i {
            color: var(--warning);
            margin-top: 0.2rem;
        }

        .notice-content div {
            font-size: 0.875rem;
            color: var(--text);
        }

        /* Scenarios Tab */
        .scenarios-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 1.5rem;
        }

        .scenario-card {
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 1.5rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .scenario-card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
            border-color: var(--primary);
        }

        .scenario-card.active {
            border-color: var(--primary);
            background: var(--bg-secondary);
        }

        .scenario-header {
            font-size: 1.125rem;
            font-weight: 600;
            color: var(--text);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .scenario-header i {
            color: var(--primary);
        }

        .scenario-metric {
            display: flex;
            justify-content: space-between;
            padding: 0.5rem 0;
            border-bottom: 1px solid var(--border);
            font-size: 0.875rem;
        }

        .scenario-metric:last-child {
            border-bottom: none;
        }

        .scenario-metric-label {
            color: var(--text-secondary);
        }

        .scenario-metric-value {
            font-weight: 600;
            color: var(--text);
        }

        /* Summary Section */
        .summary-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .summary-card {
            background: linear-gradient(135deg, var(--primary), var(--primary-dark));
            color: white;
            padding: 1.5rem;
            border-radius: var(--radius);
            text-align: center;
        }

        .summary-card .label {
            font-size: 0.875rem;
            opacity: 0.9;
            margin-bottom: 0.5rem;
        }

        .summary-card .value {
            font-size: 1.75rem;
            font-weight: 700;
        }

        /* Toast */
        .toast {
            position: fixed;
            bottom: 2rem;
            right: 2rem;
            background: var(--bg-card);
            border: 1px solid var(--border);
            border-radius: var(--radius);
            padding: 1rem 1.5rem;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            box-shadow: var(--shadow-lg);
            transform: translateX(400px);
            opacity: 0;
            transition: all 0.3s ease;
            z-index: 1000;
        }

        .toast.show {
            transform: translateX(0);
            opacity: 1;
        }

        .toast.success i { color: var(--success); }
        .toast.error i { color: var(--danger); }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background-color: var(--bg-card);
            margin: 5% auto;
            border: 1px solid var(--border);
            border-radius: var(--radius);
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: var(--shadow-lg);
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1.5rem;
            border-bottom: 1px solid var(--border);
        }

        .modal-header h2 {
            margin: 0;
            color: var(--text);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            color: var(--text-secondary);
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            transition: all 0.2s;
        }

        .modal-close:hover {
            color: var(--text);
            background: var(--bg-secondary);
        }

        .modal-body {
            padding: 1.5rem;
        }

        .scenario-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem;
            border: 1px solid var(--border);
            border-radius: 8px;
            margin-bottom: 1rem;
            background: var(--bg-secondary);
        }

        .scenario-info h4 {
            margin: 0 0 0.5rem 0;
            color: var(--text);
        }

        .scenario-info p {
            margin: 0;
            color: var(--text-secondary);
            font-size: 0.875rem;
        }

        .scenario-actions {
            display: flex;
            gap: 0.5rem;
        }

        .scenario-actions .btn {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        /* Sensitivity Analysis Styles */
        .sensitivity-container {
            display: flex;
            flex-direction: column;
            gap: 3rem;
        }

        .sensitivity-section {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 2rem;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        }

        .sensitivity-section h3 {
            color: var(--text);
            margin-bottom: 1rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .sensitivity-section h3 i {
            color: var(--primary);
        }

        .sensitivity-info {
            margin-bottom: 1.5rem;
        }

        .sensitivity-info p {
            color: var(--text-secondary);
            font-size: 0.875rem;
            margin: 0;
        }

        .sensitivity-table-wrapper {
            overflow-x: auto;
            margin-bottom: 1rem;
            border-radius: 8px;
            border: 1px solid var(--border);
        }

        .sensitivity-table {
            width: 100%;
            border-collapse: collapse;
            font-size: 0.875rem;
            background: var(--bg-primary);
        }

        .sensitivity-table th {
            background: var(--bg-secondary);
            color: var(--text);
            padding: 0.75rem;
            text-align: center;
            font-weight: 600;
            border: 1px solid var(--border);
            white-space: nowrap;
        }

        .sensitivity-table th.corner-cell {
            background: var(--primary);
            color: white;
            font-size: 0.75rem;
        }

        .sensitivity-table td {
            padding: 0.75rem;
            text-align: center;
            border: 1px solid var(--border);
            cursor: pointer;
            transition: all 0.2s;
            font-weight: 500;
            position: relative;
        }

        .sensitivity-table td:hover {
            box-shadow: inset 0 0 0 2px var(--primary);
            z-index: 1;
        }

        .sensitivity-table td.current-params {
            box-shadow: inset 0 0 0 3px var(--primary);
            background: var(--primary);
            color: white;
        }

        .sensitivity-table .row-header {
            background: var(--bg-secondary);
            color: var(--text);
            font-weight: 600;
            cursor: default;
        }

        .sensitivity-table .row-header:hover {
            box-shadow: none;
        }

        /* Color coding for profit levels */
        .profit-low { background-color: #ffebee; color: #c62828; }
        .profit-medium { background-color: #fff3e0; color: #ef6c00; }
        .profit-high { background-color: #e8f5e8; color: #2e7d32; }

        /* Color coding for payback periods */
        .payback-slow { background-color: #ffebee; color: #c62828; }
        .payback-moderate { background-color: #fff3e0; color: #ef6c00; }
        .payback-fast { background-color: #e8f5e8; color: #2e7d32; }

        /* Dark theme adjustments */
        [data-theme="dark"] .profit-low { background-color: #3d1f1f; color: #ef9a9a; }
        [data-theme="dark"] .profit-medium { background-color: #3d2f1f; color: #ffcc02; }
        [data-theme="dark"] .profit-high { background-color: #1f3d1f; color: #a5d6a7; }
        [data-theme="dark"] .payback-slow { background-color: #3d1f1f; color: #ef9a9a; }
        [data-theme="dark"] .payback-moderate { background-color: #3d2f1f; color: #ffcc02; }
        [data-theme="dark"] .payback-fast { background-color: #1f3d1f; color: #a5d6a7; }

        .sensitivity-legend {
            display: flex;
            gap: 2rem;
            justify-content: center;
            margin-top: 1rem;
            flex-wrap: wrap;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.75rem;
            color: var(--text-secondary);
        }

        .legend-color {
            width: 16px;
            height: 16px;
            border-radius: 3px;
            border: 1px solid var(--border);
        }

        .legend-red { background-color: #ffebee; }
        .legend-yellow { background-color: #fff3e0; }
        .legend-green { background-color: #e8f5e8; }

        [data-theme="dark"] .legend-red { background-color: #3d1f1f; }
        [data-theme="dark"] .legend-yellow { background-color: #3d2f1f; }
        [data-theme="dark"] .legend-green { background-color: #1f3d1f; }

        /* Mobile Responsive */
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                align-items: stretch;
            }

            .header-actions {
                justify-content: space-between;
            }

            .tab-nav-inner {
                padding: 0;
            }

            .tab-btn {
                padding: 1rem;
                font-size: 0.75rem;
            }

            .tab-btn i {
                font-size: 1.25rem;
            }

            .tab-btn span {
                display: none;
            }

            .metrics-grid {
                grid-template-columns: 1fr;
            }

            .parameters-container {
                grid-template-columns: 1fr;
            }

            /* Two-column layout for amount inputs on mobile */
            .parameter-section {
                display: flex;
                flex-direction: column;
            }

            .parameter-section .parameter-inputs {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 1rem;
                margin-top: 0.5rem;
            }

            /* Special layout for investment section with 3 items */
            .parameter-section:first-of-type .parameter-inputs {
                grid-template-columns: 1fr 1fr;
            }

            .parameter-section:first-of-type .parameter-inputs .parameter:nth-child(3) {
                grid-column: 1 / -1;
            }

            .parameter-section .parameter.full-width {
                grid-column: 1 / -1;
            }


            .scenarios-grid {
                grid-template-columns: 1fr;
            }

            .data-table {
                font-size: 0.75rem;
            }

            .data-table th,
            .data-table td {
                padding: 0.5rem;
            }

            .toast {
                right: 1rem;
                left: 1rem;
                transform: translateY(100px);
            }

            .toast.show {
                transform: translateY(0);
            }

            /* Sensitivity Tables Mobile */
            .sensitivity-container {
                gap: 2rem;
            }

            .sensitivity-section {
                padding: 1rem;
            }

            .sensitivity-table {
                font-size: 0.75rem;
            }

            .sensitivity-table th,
            .sensitivity-table td {
                padding: 0.5rem 0.25rem;
            }

            .sensitivity-legend {
                gap: 1rem;
                flex-direction: column;
                align-items: center;
            }
        }

        @media (min-width: 769px) and (max-width: 1024px) {
            .metrics-grid {
                grid-template-columns: repeat(2, 1fr);
            }

        }

        /* Print Styles */
        @media print {
            .header-actions,
            .tab-nav {
                display: none;
            }

            .tab-panel {
                display: block !important;
                page-break-after: always;
            }
        }

        /* Loading Spinner */
        .spinner {
            display: inline-block;
            width: 20px;
            height: 20px;
            border: 3px solid var(--border);
            border-top-color: var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        /* Bank Presentation Styles */
        #bank-presentation-tab {
            padding: 0;
            background: linear-gradient(135deg, var(--primary) 0%, var(--secondary) 100%);
            min-height: 100vh;
        }

        /* Hero Section */
        .presentation-hero {
            position: relative;
            background: linear-gradient(135deg, #1e40af 0%, #3730a3 50%, #581c87 100%);
            color: white;
            padding: 4rem 2rem;
            text-align: center;
            overflow: hidden;
        }

        .hero-background {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000"><defs><pattern id="grid" width="50" height="50" patternUnits="userSpaceOnUse"><path d="M 50 0 L 0 0 0 50" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="1"/></pattern></defs><rect width="100%" height="100%" fill="url(%23grid)"/></svg>');
            animation: float 20s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-10px) rotate(0.5deg); }
        }

        .hero-content {
            position: relative;
            z-index: 2;
            max-width: 1200px;
            margin: 0 auto;
        }

        .hero-title {
            font-size: 3.5rem;
            font-weight: 900;
            margin: 0 0 1rem 0;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            animation: slideInDown 1s ease-out;
        }

        .hero-subtitle {
            font-size: 1.5rem;
            font-weight: 300;
            margin: 0 0 3rem 0;
            opacity: 0.9;
            animation: slideInUp 1s ease-out 0.3s both;
        }

        .hero-metrics {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            max-width: 800px;
            margin: 0 auto;
        }

        .hero-metric-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 2rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
            animation: fadeInUp 1s ease-out 0.6s both;
        }

        .hero-metric-card:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.15);
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }

        .metric-icon {
            font-size: 2rem;
            color: #60a5fa;
            min-width: 60px;
            height: 60px;
            background: rgba(96, 165, 250, 0.2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .metric-content {
            flex: 1;
            text-align: left;
        }

        .metric-value {
            font-size: 2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            color: #fbbf24;
        }

        .metric-label {
            font-size: 0.9rem;
            opacity: 0.8;
            font-weight: 500;
        }

        /* Presentation Sections */
        .presentation-section {
            padding: 4rem 2rem;
            max-width: 1200px;
            margin: 0 auto;
            background: var(--bg);
        }

        .presentation-section:nth-child(even) {
            background: var(--card-bg);
        }

        .section-header {
            text-align: center;
            margin-bottom: 3rem;
        }

        .section-header h2 {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--text);
            margin: 0;
            position: relative;
            display: inline-block;
        }

        .section-header h2::after {
            content: '';
            position: absolute;
            bottom: -10px;
            left: 50%;
            transform: translateX(-50%);
            width: 100px;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 2px;
        }

        /* Investment Highlights */
        .highlights-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
        }

        .highlight-card {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 16px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .highlight-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .highlight-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border-color: var(--primary);
        }

        .highlight-card:hover::before {
            transform: scaleX(1);
        }

        .highlight-icon {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 1.5rem;
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .highlight-card h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0 0 1rem 0;
            color: var(--text);
        }

        .highlight-card p {
            color: var(--text-secondary);
            line-height: 1.6;
            margin: 0;
        }

        /* Performance Grid */
        .performance-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 2rem;
        }

        .performance-card {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 16px;
            padding: 2rem;
            transition: all 0.3s ease;
        }

        .performance-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .performance-card h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0 0 1.5rem 0;
            color: var(--text);
            text-align: center;
        }

        .chart-summary {
            text-align: center;
            margin-top: 1rem;
            padding-top: 1rem;
            border-top: 1px solid var(--border);
        }

        /* ROI Bars */
        .roi-bars {
            space-y: 1rem;
        }

        .roi-bar-container {
            margin-bottom: 1.5rem;
        }

        .roi-bar-label {
            font-weight: 600;
            margin-bottom: 0.5rem;
            color: var(--text);
            font-size: 0.9rem;
        }

        .roi-bar-wrapper {
            display: flex;
            align-items: center;
            gap: 1rem;
            position: relative;
        }

        .roi-bar {
            height: 30px;
            border-radius: 15px;
            position: relative;
            overflow: hidden;
            flex: 1;
            background: var(--border);
            animation: expandWidth 1.5s ease-out 0.5s both;
        }

        .roi-bar.project-roi {
            background: linear-gradient(90deg, #10b981, #059669);
        }

        .roi-bar.equity-roi {
            background: linear-gradient(90deg, #3b82f6, #1d4ed8);
        }

        .roi-bar.project-irr {
            background: linear-gradient(90deg, #8b5cf6, #7c3aed);
        }

        .roi-bar.equity-irr {
            background: linear-gradient(90deg, #f59e0b, #d97706);
        }

        .roi-value {
            font-weight: 700;
            color: var(--text);
            white-space: nowrap;
            min-width: 60px;
            text-align: right;
        }

        @keyframes expandWidth {
            from { width: 0; }
            to { width: 100%; }
        }

        /* Financing Visual */
        .financing-visual {
            display: grid;
            grid-template-columns: 300px 1fr;
            gap: 3rem;
            align-items: center;
        }

        .financing-pie {
            text-align: center;
        }

        .pie-chart {
            margin-bottom: 1.5rem;
        }

        /* Canvas responsive styling */
        #revenueChart {
            width: 100%;
            height: 200px;
            max-width: 400px;
        }

        #financingCanvas {
            width: 100%;
            height: 200px;
            max-width: 200px;
        }

        .financing-legend {
            space-y: 1rem;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            border-radius: 4px;
        }

        .legend-color.debt {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .legend-color.equity {
            background: linear-gradient(135deg, #10b981, #059669);
        }

        .financing-details {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
        }

        .financing-detail {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 12px;
            padding: 1.5rem;
            display: flex;
            align-items: center;
            gap: 1rem;
            transition: all 0.3s ease;
        }

        .financing-detail:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .financing-detail i {
            font-size: 1.5rem;
            color: var(--primary);
            min-width: 30px;
        }

        .financing-detail strong {
            display: block;
            font-weight: 600;
            margin-bottom: 0.25rem;
            color: var(--text);
        }

        .financing-detail span {
            color: var(--text-secondary);
        }

        /* Risk Grid */
        .risk-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 3rem;
        }

        .scenario-comparison h3,
        .risk-factors h3 {
            font-size: 1.3rem;
            font-weight: 600;
            margin: 0 0 1.5rem 0;
            color: var(--text);
        }

        .scenario-bars {
            space-y: 1rem;
        }

        .scenario-bar {
            background: var(--card-bg);
            border: 1px solid var(--border);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: all 0.3s ease;
        }

        .scenario-bar:hover {
            transform: translateX(5px);
            border-color: var(--primary);
        }

        .scenario-label {
            font-weight: 500;
            color: var(--text);
        }

        .scenario-value {
            font-weight: 700;
            color: var(--primary);
        }

        .risk-item {
            display: flex;
            align-items: flex-start;
            gap: 1rem;
            margin-bottom: 1.5rem;
            padding: 1rem;
            background: var(--card-bg);
            border-radius: 8px;
            border-left: 4px solid #10b981;
            transition: all 0.3s ease;
        }

        .risk-item:hover {
            transform: translateX(5px);
            box-shadow: 0 3px 10px rgba(0,0,0,0.1);
        }

        .risk-item i {
            color: #10b981;
            font-size: 1.2rem;
            margin-top: 0.2rem;
        }

        .risk-item strong {
            color: var(--text);
        }

        /* Call to Action */
        .cta-section {
            background: linear-gradient(135deg, #1e40af 0%, #3730a3 50%, #581c87 100%);
            color: white;
            text-align: center;
        }

        .cta-content {
            max-width: 800px;
            margin: 0 auto;
        }

        .cta-content h2 {
            font-size: 2.5rem;
            font-weight: 700;
            margin: 0 0 1.5rem 0;
        }

        .cta-description {
            font-size: 1.2rem;
            line-height: 1.6;
            margin: 0 0 3rem 0;
            opacity: 0.9;
        }

        .cta-highlights {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            margin: 3rem 0;
        }

        .cta-highlight {
            display: flex;
            align-items: center;
            gap: 1rem;
            text-align: left;
        }

        .cta-highlight i {
            font-size: 2rem;
            color: #fbbf24;
            min-width: 50px;
        }

        .cta-highlight strong {
            display: block;
            font-size: 1.1rem;
            margin-bottom: 0.25rem;
        }

        .cta-highlight span {
            opacity: 0.8;
            font-size: 0.9rem;
        }

        .cta-actions {
            margin: 3rem 0;
            display: flex;
            gap: 1rem;
            justify-content: center;
            flex-wrap: wrap;
        }

        .cta-button {
            padding: 1rem 2rem;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            font-size: 1.1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            text-decoration: none;
        }

        .cta-button.primary {
            background: #fbbf24;
            color: #1f2937;
        }

        .cta-button.primary:hover {
            background: #f59e0b;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(251, 191, 36, 0.4);
        }

        .cta-button.secondary {
            background: transparent;
            color: white;
            border: 2px solid white;
        }

        .cta-button.secondary:hover {
            background: white;
            color: #1e40af;
            transform: translateY(-2px);
        }

        .contact-info {
            border-top: 1px solid rgba(255,255,255,0.2);
            padding-top: 2rem;
            margin-top: 3rem;
        }

        .contact-info p {
            margin: 0.5rem 0;
            opacity: 0.9;
        }

        /* Animation Classes */
        @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(50px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Design */
        @media (max-width: 1200px) {
            .hero-metrics {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .highlights-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .performance-grid {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .presentation-hero {
                padding: 3rem 1rem;
                min-height: 60vh;
            }
            
            .hero-title {
                font-size: 2.5rem;
                margin-bottom: 0.5rem;
            }
            
            .hero-subtitle {
                font-size: 1.2rem;
                margin-bottom: 2rem;
            }
            
            .hero-metrics {
                grid-template-columns: 1fr;
                gap: 1rem;
                margin-top: 2rem;
            }
            
            .hero-metric-card {
                padding: 1.5rem;
            }
            
            .metric-icon {
                width: 50px;
                height: 50px;
                margin-bottom: 1rem;
            }
            
            .metric-value {
                font-size: 1.8rem;
            }
            
            .presentation-section {
                padding: 2rem 1rem;
            }
            
            .section-header h2 {
                font-size: 1.8rem;
            }
            
            .highlights-grid {
                grid-template-columns: 1fr;
                gap: 1.5rem;
            }
            
            .highlight-card {
                padding: 2rem 1.5rem;
                text-align: center;
            }
            
            .highlight-icon {
                width: 50px;
                height: 50px;
                margin: 0 auto 1rem;
            }
            
            .performance-grid {
                grid-template-columns: 1fr;
                gap: 2rem;
            }
            
            .performance-card {
                padding: 1.5rem;
            }
            
            .performance-card h3 {
                font-size: 1.3rem;
                margin-bottom: 1.5rem;
            }
            
            .roi-bars {
                gap: 1rem;
            }
            
            .roi-bar-label {
                font-size: 0.9rem;
            }
            
            .roi-value {
                font-size: 1.2rem;
            }
            
            .financing-visual {
                grid-template-columns: 1fr;
                text-align: center;
                gap: 2rem;
            }
            
            .financing-pie {
                order: 1;
            }
            
            .financing-details {
                order: 2;
                display: grid;
                grid-template-columns: 1fr;
                gap: 1rem;
                text-align: left;
            }
            
            .financing-detail {
                padding: 1rem;
                background: rgba(255,255,255,0.05);
                border-radius: 8px;
                border-left: 4px solid var(--primary);
            }
            
            .pie-chart canvas {
                width: 180px !important;
                height: 180px !important;
            }
            
            .financing-legend {
                margin-top: 1.5rem;
            }
            
            .legend-item {
                margin-bottom: 0.75rem;
                font-size: 0.9rem;
            }
            
            .risk-grid {
                grid-template-columns: 1fr;
                gap: 2rem;
            }
            
            .scenario-comparison,
            .risk-factors {
                padding: 1.5rem;
            }
            
            .scenario-bars {
                gap: 0.75rem;
            }
            
            .scenario-bar {
                padding: 1rem;
            }
            
            .scenario-label {
                font-size: 0.9rem;
            }
            
            .risk-item {
                padding: 1rem 0;
                flex-direction: column;
                text-align: center;
                gap: 0.5rem;
            }
            
            .risk-item i {
                margin-bottom: 0.5rem;
            }
            
            .cta-section {
                padding: 3rem 1rem;
            }
            
            .cta-content h2 {
                font-size: 2rem;
            }
            
            .cta-description {
                font-size: 1.1rem;
                margin-bottom: 2rem;
            }
            
            .cta-highlights {
                grid-template-columns: 1fr;
                gap: 1rem;
                margin: 2rem 0;
            }
            
            .cta-highlight {
                padding: 1.5rem;
                text-align: center;
                flex-direction: column;
                gap: 1rem;
            }
            
            .cta-highlight i {
                margin-bottom: 0.5rem;
            }
            
            .cta-actions {
                flex-direction: column;
                align-items: center;
                gap: 1rem;
            }
            
            .cta-button {
                width: 100%;
                max-width: 300px;
                justify-content: center;
                padding: 1rem 2rem;
                font-size: 1rem;
            }
            
            .contact-info {
                padding-top: 1.5rem;
                margin-top: 2rem;
                text-align: center;
            }
            
            .contact-info p {
                font-size: 0.9rem;
                margin: 0.75rem 0;
            }
        }

        @media (max-width: 480px) {
            .hero-title {
                font-size: 2rem;
            }
            
            .hero-subtitle {
                font-size: 1rem;
            }
            
            .hero-metric-card {
                padding: 1rem;
            }
            
            .metric-value {
                font-size: 1.5rem;
            }
            
            .metric-label {
                font-size: 0.8rem;
            }
            
            .presentation-section {
                padding: 1.5rem 0.75rem;
            }
            
            .section-header h2 {
                font-size: 1.5rem;
            }
            
            .highlight-card {
                padding: 1.5rem 1rem;
            }
            
            .highlight-card h3 {
                font-size: 1.2rem;
            }
            
            .performance-card {
                padding: 1rem;
            }
            
            .performance-card h3 {
                font-size: 1.1rem;
            }
            
            .chart-summary {
                font-size: 0.9rem;
            }
            
            .roi-bar-label {
                font-size: 0.8rem;
            }
            
            .roi-value {
                font-size: 1rem;
            }
            
            .pie-chart canvas {
                width: 150px !important;
                height: 150px !important;
            }
            
            .financing-detail {
                padding: 0.75rem;
            }
            
            .financing-detail strong {
                font-size: 0.9rem;
            }
            
            .scenario-bar {
                padding: 0.75rem;
            }
            
            .scenario-label {
                font-size: 0.8rem;
            }
            
            .scenario-value {
                font-size: 0.9rem;
            }
            
            .risk-item {
                padding: 0.75rem 0;
            }
            
            .cta-content h2 {
                font-size: 1.7rem;
            }
            
            .cta-description {
                font-size: 1rem;
            }
            
            .cta-highlight {
                padding: 1rem;
            }
            
            .cta-button {
                padding: 0.875rem 1.5rem;
                font-size: 0.9rem;
            }
            
            .contact-info p {
                font-size: 0.8rem;
                line-height: 1.6;
            }
        }
    </style>
    <script>
        // Tab switching function - defined early to ensure immediate availability
        function switchTab(tabName) {
            try {
                console.log(`Switching to tab: ${tabName}`);
                
                // Update tab buttons
                document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
                
                // Find and activate the correct button
                const buttons = document.querySelectorAll('.tab-btn');
                buttons.forEach(btn => {
                    if (btn.getAttribute('onclick') && btn.getAttribute('onclick').includes(tabName)) {
                        btn.classList.add('active');
                    }
                });
                
                // Update tab panels
                document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));
                const targetPanel = document.getElementById(`${tabName}-tab`);
                if (targetPanel) {
                    targetPanel.classList.add('active');
                } else {
                    console.error(`Tab panel not found: ${tabName}-tab`);
                }
                
                // Special handling for tabs that need additional processing
                if (tabName === 'sensitivity') {
                    // Defer sensitivity table generation until DOM and other functions are ready
                    setTimeout(() => {
                        try {
                            if (window.generateSensitivityTables) {
                                console.log('Sensitivity tab activated, generating tables...');
                                window.generateSensitivityTables();
                            } else {
                                console.log('generateSensitivityTables not ready yet, will try again...');
                                setTimeout(() => window.generateSensitivityTables && window.generateSensitivityTables(), 1000);
                            }
                        } catch (error) {
                            console.error('Error in sensitivity tab:', error);
                        }
                    }, 500);
                }
                
                if (tabName === 'report') {
                    setTimeout(() => {
                        try {
                            if (window.updateReport) {
                                console.log('Report tab activated, updating report...');
                                window.updateReport();
                            } else {
                                console.log('updateReport function not ready yet...');
                            }
                        } catch (error) {
                            console.error('Error updating report:', error);
                        }
                    }, 300);
                }
                
                if (tabName === 'bank-presentation') {
                    setTimeout(() => {
                        try {
                            if (window.calculateModel && window.updateBankPresentationCharts) {
                                const results = window.calculateModel();
                                window.updateBankPresentationCharts(results);
                            } else {
                                console.log('Bank presentation functions not ready yet...');
                            }
                        } catch (error) {
                            console.error('Error in bank presentation tab:', error);
                        }
                    }, 500);
                }
            } catch (error) {
                console.error('Tab switching error:', error);
            }
        }
        
        // Make function globally available
        window.switchTab = switchTab;
    </script>
</head>
<body>
    <div class="app-container">
        <!-- Header -->
        <header class="header">
            <div class="header-content">
                <div class="header-title">
                    <svg width="40" height="40" viewBox="0 0 120 120" xmlns="http://www.w3.org/2000/svg" style="margin-right: 12px;">
                        <defs>
                            <linearGradient id="modernGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" style="stop-color:#06b6d4;stop-opacity:1" />
                                <stop offset="50%" style="stop-color:#3b82f6;stop-opacity:1" />
                                <stop offset="100%" style="stop-color:#8b5cf6;stop-opacity:1" />
                            </linearGradient>
                            <linearGradient id="courtGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                                <stop offset="0%" style="stop-color:#f8fafc;stop-opacity:0.8" />
                                <stop offset="100%" style="stop-color:#e2e8f0;stop-opacity:0.8" />
                            </linearGradient>
                        </defs>
                        <!-- Court background -->
                        <rect x="15" y="25" width="90" height="70" fill="url(#courtGradient)" stroke="#cbd5e1" stroke-width="2" rx="8"/>
                        <!-- Court center line -->
                        <line x1="60" y1="25" x2="60" y2="95" stroke="#94a3b8" stroke-width="2" opacity="0.6"/>
                        <!-- Left padel racket -->
                        <g transform="translate(30, 35)">
                            <path d="M2 6 Q2 2 6 2 L10 2 Q14 2 14 6 L14 20 Q14 28 8 28 Q2 28 2 20 Z" fill="none" stroke="url(#modernGradient)" stroke-width="4"/>
                            <rect x="6" y="28" width="4" height="20" fill="url(#modernGradient)" rx="2"/>
                            <circle cx="5" cy="8" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="11" cy="8" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="8" cy="12" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="5" cy="16" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="11" cy="16" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="8" cy="20" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="5" cy="24" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="11" cy="24" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                        </g>
                        <!-- Right padel racket -->
                        <g transform="translate(74, 35)">
                            <path d="M2 6 Q2 2 6 2 L10 2 Q14 2 14 6 L14 20 Q14 28 8 28 Q2 28 2 20 Z" fill="none" stroke="url(#modernGradient)" stroke-width="4"/>
                            <rect x="6" y="28" width="4" height="20" fill="url(#modernGradient)" rx="2"/>
                            <circle cx="5" cy="8" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="11" cy="8" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="8" cy="12" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="5" cy="16" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="11" cy="16" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="8" cy="20" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="5" cy="24" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                            <circle cx="11" cy="24" r="1.5" fill="url(#modernGradient)" opacity="0.4"/>
                        </g>
                        <!-- H crossbar -->
                        <rect x="46" y="49" width="28" height="6" fill="url(#modernGradient)" rx="3"/>
                        <!-- Accent dots -->
                        <circle cx="45" cy="52" r="2" fill="url(#modernGradient)" opacity="0.7"/>
                        <circle cx="75" cy="52" r="2" fill="url(#modernGradient)" opacity="0.7"/>
                    </svg>
                    <h1>Padeliko Business Model</h1>
                </div>
                <div class="header-actions">
                    <button class="btn btn-primary" onclick="saveSettings()">
                        <i class="fas fa-save"></i>
                        <span>Save</span>
                    </button>
                    <button class="btn" onclick="loadSettings()">
                        <i class="fas fa-upload"></i>
                        <span>Load</span>
                    </button>
                    <button class="btn" onclick="exportData()">
                        <i class="fas fa-download"></i>
                        <span>Export</span>
                    </button>
                    <button class="btn" onclick="resetSettings()">
                        <i class="fas fa-undo"></i>
                        <span>Reset</span>
                    </button>
                    <button class="btn btn-icon" onclick="toggleTheme()">
                        <i class="fas fa-moon" id="themeIcon"></i>
                    </button>
                </div>
            </div>
        </header>

        <!-- Tab Navigation -->
        <nav class="tab-nav">
            <div class="tab-nav-inner">
                <button class="tab-btn active" onclick="switchTab('dashboard')">
                    <i class="fas fa-home"></i>
                    <span>Dashboard</span>
                </button>
                <button class="tab-btn" onclick="switchTab('parameters')">
                    <i class="fas fa-sliders-h"></i>
                    <span>Parameters</span>
                </button>
                <button class="tab-btn" onclick="switchTab('report')">
                    <i class="fas fa-file-alt"></i>
                    <span>Report</span>
                </button>
                <button class="tab-btn" onclick="switchTab('scenarios')">
                    <i class="fas fa-layer-group"></i>
                    <span>Scenarios</span>
                </button>
                <button class="tab-btn" onclick="switchTab('sensitivity')">
                    <i class="fas fa-table"></i>
                    <span>Sensitivity</span>
                </button>
                <button class="tab-btn" onclick="switchTab('bank-presentation')">
                    <i class="fas fa-building-columns"></i>
                    <span>Bank Presentation</span>
                </button>
            </div>
        </nav>

        <!-- Tab Content -->
        <main class="tab-content">
            <!-- Dashboard Tab -->
            <div id="dashboard-tab" class="tab-panel active">
                <h2 style="margin-bottom: 2rem; color: var(--text);">Financial Overview</h2>
                
                <div class="summary-cards">
                    <div class="summary-card">
                        <div class="label">Total Investment</div>
                        <div class="value" id="summaryInvestment">€380,000</div>
                    </div>
                    <div class="summary-card">
                        <div class="label">Annual Profit</div>
                        <div class="value" id="summaryProfit">€288,240</div>
                    </div>
                    <div class="summary-card">
                        <div class="label">ROI</div>
                        <div class="value" id="summaryROI">75.9%</div>
                    </div>
                    <div class="summary-card">
                        <div class="label">Payback Period</div>
                        <div class="value" id="summaryPayback">1.3 years</div>
                    </div>
                </div>

                <div class="metrics-grid">
                    <div class="metric-card">
                        <div class="metric-label">Total Investment Required</div>
                        <div class="metric-value" id="totalInvestment">€380,000</div>
                        <div class="metric-change">Courts + Infrastructure</div>
                    </div>
                    <div class="metric-card positive">
                        <div class="metric-label">Annual Revenue</div>
                        <div class="metric-value" id="annualRevenue">€518,840</div>
                        <div class="metric-change">All revenue streams</div>
                    </div>
                    <div class="metric-card negative">
                        <div class="metric-label">Annual Operating Costs</div>
                        <div class="metric-value" id="annualCosts">€230,600</div>
                        <div class="metric-change">Fixed + Variable costs</div>
                    </div>
                    <div class="metric-card positive">
                        <div class="metric-label">Net Annual Profit</div>
                        <div class="metric-value" id="netProfit">€288,240</div>
                        <div class="metric-change">Revenue - Costs</div>
                    </div>
                    <div class="metric-card positive">
                        <div class="metric-label">Project ROI (Annual | Total)</div>
                        <div class="metric-value" id="roi">75.9% | 379.5%</div>
                        <div class="metric-change" id="roiPeriodLabel">Annual | 5-Year Total</div>
                    </div>
                    <div class="metric-card positive">
                        <div class="metric-label">Equity ROI (Annual | Multiple)</div>
                        <div class="metric-value" id="equityRoi">125.4% | 6.3x</div>
                        <div class="metric-change" id="equityRoiLabel">Cash-on-cash | 5-Year Multiple</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Payback Period</div>
                        <div class="metric-value" id="paybackPeriod">1.3 years</div>
                        <div class="metric-change">Time to recover investment</div>
                    </div>
                    <div class="metric-card">
                        <div class="metric-label">Equity Investment</div>
                        <div class="metric-value" id="equityInvestment">€152,000</div>
                        <div class="metric-change">Required capital (40%)</div>
                    </div>
                    <div class="metric-card warning">
                        <div class="metric-label">Annual Debt Service</div>
                        <div class="metric-value" id="debtService">€58,400</div>
                        <div class="metric-change">Loan payments</div>
                    </div>
                    <div class="metric-card warning">
                        <div class="metric-label">Break-even Occupancy</div>
                        <div class="metric-value" id="breakEvenOccupancy">20.2%</div>
                        <div class="metric-change">Minimum required</div>
                    </div>
                    <div class="metric-card positive">
                        <div class="metric-label">5-Year Total Profit</div>
                        <div class="metric-value" id="fiveYearProfit">€1,441,200</div>
                        <div class="metric-change">Cumulative profit</div>
                    </div>
                </div>
            </div>

            <!-- Parameters Tab -->
            <div id="parameters-tab" class="tab-panel">
                <h2 style="margin-bottom: 2rem; color: var(--text);">Business Parameters</h2>
                
                <div class="parameters-container">
                    <!-- Investment Parameters -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-building"></i> Investment</h3>
                        <div class="parameter full-width">
                            <label>Number of Courts
                                <button class="info-btn" onclick="showInfoModal('numCourts')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="numCourts" min="1" max="12" value="8" step="1">
                                <span class="range-value">8</span>
                            </div>
                        </div>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Cost per Court (€)
                                    <button class="info-btn" onclick="showInfoModal('costPerCourt')" type="button">i</button>
                                </label>
                                <input type="text" id="costPerCourt" value="35,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Infrastructure Cost (€)
                                    <button class="info-btn" onclick="showInfoModal('infrastructureCost')" type="button">i</button>
                                </label>
                                <input type="text" id="infrastructureCost" value="100,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Additional Facilities (F&B + Pro Shop) (€)
                                    <button class="info-btn" onclick="showInfoModal('additionalFacilities')" type="button">i</button>
                                </label>
                                <input type="text" id="additionalFacilities" value="200,000" class="amount-input" inputmode="numeric">
                            </div>
                        </div>
                    </div>

                    <!-- Revenue Parameters -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-euro-sign"></i> Revenue Model</h3>
                        <div class="parameter full-width">
                            <label>Hourly Rate (€)
                                <button class="info-btn" onclick="showInfoModal('hourlyRate')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="hourlyRate" min="20" max="40" value="28" step="1">
                                <span class="range-value">€28</span>
                            </div>
                        </div>
                        <div class="parameter full-width">
                            <label>Occupancy Rate (%)
                                <button class="info-btn" onclick="showInfoModal('occupancyRate')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="occupancyRate" min="20" max="90" value="50" step="5">
                                <span class="range-value">50%</span>
                            </div>
                        </div>
                        <div class="parameter full-width">
                            <label>Operating Hours/Day
                                <button class="info-btn" onclick="showInfoModal('hoursPerDay')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="hoursPerDay" min="8" max="16" value="12" step="1">
                                <span class="range-value">12h</span>
                            </div>
                        </div>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Operating Days/Year
                                    <button class="info-btn" onclick="showInfoModal('operatingDays')" type="button">i</button>
                                </label>
                                <input type="number" id="daysPerYear" min="300" max="365" value="360" step="1">
                            </div>
                        </div>
                    </div>

                    <!-- Operating Costs -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-receipt"></i> Operating Costs</h3>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Annual Land Rental (€)
                                    <button class="info-btn" onclick="showInfoModal('landRental')" type="button">i</button>
                                </label>
                                <input type="text" id="landRental" value="120,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Maintenance per Court/Year (€)
                                    <button class="info-btn" onclick="showInfoModal('maintenancePerCourt')" type="button">i</button>
                                </label>
                                <input type="text" id="maintenancePerCourt" value="2,200" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Annual Water Cost (€)
                                    <button class="info-btn" onclick="showInfoModal('waterCost')" type="button">i</button>
                                </label>
                                <input type="text" id="waterCost" value="8,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Annual Electricity Cost (€)
                                    <button class="info-btn" onclick="showInfoModal('electricityCost')" type="button">i</button>
                                </label>
                                <input type="text" id="electricityCost" value="15,000" class="amount-input" inputmode="numeric">
                            </div>
                        </div>
                    </div>

                    <!-- Staff Salaries -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-users"></i> Staff Salaries</h3>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Manager Salary (€/year)
                                    <button class="info-btn" onclick="showInfoModal('managerSalary')" type="button">i</button>
                                </label>
                                <input type="text" id="managerSalary" value="42,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Instructor Salary (€/year)
                                    <button class="info-btn" onclick="showInfoModal('instructorSalary')" type="button">i</button>
                                </label>
                                <input type="text" id="instructorSalary" value="19,800" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Reception Staff (€/year)
                                    <button class="info-btn" onclick="showInfoModal('receptionSalary')" type="button">i</button>
                                </label>
                                <input type="text" id="receptionSalary" value="14,400" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Maintenance Staff (€/year)
                                    <button class="info-btn" onclick="showInfoModal('maintenanceStaffSalary')" type="button">i</button>
                                </label>
                                <input type="text" id="maintenanceStaffSalary" value="16,800" class="amount-input" inputmode="numeric">
                            </div>
                        </div>
                    </div>

                    <!-- Additional Revenue -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-plus-circle"></i> Additional Revenue</h3>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Pro Shop Annual (€)
                                    <button class="info-btn" onclick="showInfoModal('proShopRevenue')" type="button">i</button>
                                </label>
                                <input type="text" id="proShopRevenue" value="15,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>F&B Annual (€)
                                    <button class="info-btn" onclick="showInfoModal('fbRevenue')" type="button">i</button>
                                </label>
                                <input type="text" id="fbRevenue" value="20,000" class="amount-input" inputmode="numeric">
                            </div>
                            <div class="parameter">
                                <label>Events per Year
                                    <button class="info-btn" onclick="showInfoModal('eventsPerYear')" type="button">i</button>
                                </label>
                                <input type="number" id="eventsPerYear" min="0" max="24" value="6" step="1">
                            </div>
                            <div class="parameter">
                                <label>Revenue per Event (€)
                                    <button class="info-btn" onclick="showInfoModal('revenuePerEvent')" type="button">i</button>
                                </label>
                                <input type="text" id="revenuePerEvent" value="2,000" class="amount-input" inputmode="numeric">
                            </div>
                        </div>
                    </div>

                    <!-- VAT & Platform Fees -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-calculator"></i> VAT & Platform Fees</h3>
                        <div class="parameter full-width">
                            <label>VAT Rate (%)
                                <button class="info-btn" onclick="showInfoModal('vatRate')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="vatRate" min="5" max="19" value="5" step="1">
                                <span class="range-value">5%</span>
                            </div>
                        </div>
                        <div class="parameter full-width">
                            <label>Playtomic Commission (%)
                                <button class="info-btn" onclick="showInfoModal('playtomicCommission')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="playtomicCommission" min="2" max="10" value="4" step="0.5">
                                <span class="range-value">4%</span>
                            </div>
                        </div>
                    </div>

                    <!-- Financing Parameters -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-university"></i> Financing</h3>
                        <div class="parameter full-width">
                            <label>Financing Percentage (%)
                                <button class="info-btn" onclick="showInfoModal('financingPercentage')" type="button">i</button>
                            </label>
                            <div class="range-container">
                                <input type="range" id="financingPercentage" min="0" max="80" value="60" step="5">
                                <span class="range-value">60%</span>
                            </div>
                        </div>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Interest Rate (%)
                                    <button class="info-btn" onclick="showInfoModal('interestRate')" type="button">i</button>
                                </label>
                                <input type="number" id="interestRate" min="0" max="15" value="4" step="0.1">
                            </div>
                            <div class="parameter">
                                <label>Loan Term (years)
                                    <button class="info-btn" onclick="showInfoModal('loanTerm')" type="button">i</button>
                                </label>
                                <input type="number" id="loanTerm" min="5" max="5" value="5" step="1" readonly>
                            </div>
                            <div class="parameter">
                                <label>Project Period (years)
                                    <button class="info-btn" onclick="showInfoModal('projectPeriod')" type="button">i</button>
                                </label>
                                <div class="range-container">
                                    <input type="range" id="projectPeriod" min="3" max="10" value="5" step="1">
                                    <span class="range-value">5 years</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Development Period -->
                    <div class="parameter-section">
                        <h3><i class="fas fa-hard-hat"></i> Development Period</h3>
                        <div class="parameter full-width">
                            <label>Development Period (months)</label>
                            <div class="range-container">
                                <input type="range" id="developmentMonths" min="0" max="24" value="12" step="1">
                                <span class="range-value">12 months</span>
                            </div>
                        </div>
                        <div class="parameter-inputs">
                            <div class="parameter">
                                <label>Interest During Development</label>
                                <select id="developmentInterest">
                                    <option value="capitalized">Capitalized</option>
                                    <option value="paid">Paid Monthly</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


            <!-- Report Tab -->
            <div id="report-tab" class="tab-panel">
                <h2 style="margin-bottom: 2rem; color: var(--text);">Financial Report</h2>
                
                <div class="report-section">
                    <h3><i class="fas fa-coins"></i> Investment Breakdown</h3>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Component</th>
                                <th>Quantity</th>
                                <th>Unit Cost</th>
                                <th>Total Cost</th>
                            </tr>
                        </thead>
                        <tbody id="investmentDetails">
                            <tr>
                                <td>Padel Courts</td>
                                <td>8</td>
                                <td class="number">€35,000</td>
                                <td class="number">€280,000</td>
                            </tr>
                            <tr>
                                <td>Infrastructure</td>
                                <td>1</td>
                                <td class="number">€100,000</td>
                                <td class="number">€100,000</td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="3">Total Investment</th>
                                <th class="number" id="investmentTotal">€380,000</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="report-section">
                    <h3><i class="fas fa-chart-line"></i> Revenue Streams</h3>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Revenue Source</th>
                                <th>Calculation</th>
                                <th>Annual Amount</th>
                            </tr>
                        </thead>
                        <tbody id="revenueDetails">
                            <tr>
                                <td><strong>Gross Court Bookings</strong></td>
                                <td>8 courts × €28/hr × 12hrs × 360 days × 50%</td>
                                <td class="number">€483,840</td>
                            </tr>
                            <tr>
                                <td>Pro Shop</td>
                                <td>Annual estimate</td>
                                <td class="number">€15,000</td>
                            </tr>
                            <tr>
                                <td>Food & Beverage</td>
                                <td>Annual estimate</td>
                                <td class="number">€20,000</td>
                            </tr>
                            <tr>
                                <td>Events</td>
                                <td>6 events × €2,000</td>
                                <td class="number">€12,000</td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="2">Total Annual Revenue</th>
                                <th class="number" id="revenueTotal">€530,840</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="report-section">
                    <h3><i class="fas fa-money-check-alt"></i> Operating Expenses</h3>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Expense Category</th>
                                <th>Details</th>
                                <th>Annual Cost</th>
                            </tr>
                        </thead>
                        <tbody id="expenseDetails">
                            <tr>
                                <td>Land Rental</td>
                                <td>Annual lease</td>
                                <td class="number">€120,000</td>
                            </tr>
                            <tr>
                                <td>Court Maintenance</td>
                                <td>8 courts × €2,200</td>
                                <td class="number">€17,600</td>
                            </tr>
                            <tr>
                                <td>Manager Salary</td>
                                <td>Annual</td>
                                <td class="number">€42,000</td>
                            </tr>
                            <tr>
                                <td>Instructor Salary</td>
                                <td>Annual</td>
                                <td class="number">€19,800</td>
                            </tr>
                            <tr>
                                <td>Reception Staff</td>
                                <td>Annual</td>
                                <td class="number">€14,400</td>
                            </tr>
                            <tr>
                                <td>Maintenance Staff</td>
                                <td>Annual</td>
                                <td class="number">€16,800</td>
                            </tr>
                        </tbody>
                        <tfoot>
                            <tr>
                                <th colspan="2">Total Annual Expenses</th>
                                <th class="number" id="expenseTotal">€230,600</th>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="report-section">
                    <h3><i class="fas fa-calendar-alt"></i> 5-Year P&L Statement</h3>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Year</th>
                                <th>Revenue</th>
                                <th>Operating Expenses</th>
                                <th>Interest Expense</th>
                                <th>Net Income</th>
                                <th>Cumulative</th>
                            </tr>
                        </thead>
                        <tbody id="projectionDetails">
                            <tr>
                                <td>Year 1</td>
                                <td class="number">€530,840</td>
                                <td class="number">€230,600</td>
                                <td class="number">€15,000</td>
                                <td class="number">€285,240</td>
                                <td class="number">€285,240</td>
                            </tr>
                            <tr>
                                <td>Year 2</td>
                                <td class="number">€530,840</td>
                                <td class="number">€230,600</td>
                                <td class="number">€13,000</td>
                                <td class="number">€287,240</td>
                                <td class="number">€572,480</td>
                            </tr>
                            <tr>
                                <td>Year 3</td>
                                <td class="number">€530,840</td>
                                <td class="number">€230,600</td>
                                <td class="number">€11,000</td>
                                <td class="number">€289,240</td>
                                <td class="number">€861,720</td>
                            </tr>
                            <tr>
                                <td>Year 4</td>
                                <td class="number">€530,840</td>
                                <td class="number">€230,600</td>
                                <td class="number">€8,000</td>
                                <td class="number">€292,240</td>
                                <td class="number">€1,153,960</td>
                            </tr>
                            <tr>
                                <td>Year 5</td>
                                <td class="number">€530,840</td>
                                <td class="number">€230,600</td>
                                <td class="number">€5,000</td>
                                <td class="number">€295,240</td>
                                <td class="number">€1,449,200</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="report-section">
                    <h3><i class="fas fa-chart-line"></i> 5-Year Cash Flow Statement</h3>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Year</th>
                                <th>Net Income</th>
                                <th>Add: Interest Expense</th>
                                <th>Less: Total Debt Service</th>
                                <th>Net Cash Flow</th>
                                <th>Cumulative Cash Flow</th>
                            </tr>
                        </thead>
                        <tbody id="cashFlowDetails">
                            <tr>
                                <td>Year 1</td>
                                <td class="number">€285,240</td>
                                <td class="number">€15,000</td>
                                <td class="number">€50,496</td>
                                <td class="number">€249,744</td>
                                <td class="number">€249,744</td>
                            </tr>
                            <tr>
                                <td>Year 2</td>
                                <td class="number">€287,240</td>
                                <td class="number">€13,000</td>
                                <td class="number">€50,496</td>
                                <td class="number">€249,744</td>
                                <td class="number">€499,488</td>
                            </tr>
                            <tr>
                                <td>Year 3</td>
                                <td class="number">€289,240</td>
                                <td class="number">€11,000</td>
                                <td class="number">€50,496</td>
                                <td class="number">€249,744</td>
                                <td class="number">€749,232</td>
                            </tr>
                            <tr>
                                <td>Year 4</td>
                                <td class="number">€292,240</td>
                                <td class="number">€8,000</td>
                                <td class="number">€50,496</td>
                                <td class="number">€249,744</td>
                                <td class="number">€998,976</td>
                            </tr>
                            <tr>
                                <td>Year 5</td>
                                <td class="number">€295,240</td>
                                <td class="number">€5,000</td>
                                <td class="number">€50,496</td>
                                <td class="number">€249,744</td>
                                <td class="number">€1,248,720</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                <!-- Financing Summary Section -->
                <div class="report-section">
                    <h3><i class="fas fa-university"></i> Financing Structure</h3>
                    <table class="data-table">
                        <thead>
                            <tr>
                                <th>Financing Component</th>
                                <th>Amount</th>
                                <th>Percentage</th>
                            </tr>
                        </thead>
                        <tbody id="financingDetails">
                            <!-- Populated by JavaScript -->
                        </tbody>
                        <tfoot>
                            <tr>
                                <th>Total Investment</th>
                                <th class="number" id="reportTotalInvestment">€380,000</th>
                                <th>100%</th>
                            </tr>
                        </tfoot>
                    </table>
                    
                    <div style="margin-top: 1rem; padding: 1rem; background: var(--card-bg); border-radius: 8px; border-left: 4px solid var(--primary);">
                        <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 1rem;">
                            <div>
                                <strong>Interest Rate:</strong><br>
                                <span id="reportInterestRate">4.0%</span>
                            </div>
                            <div>
                                <strong>Loan Term:</strong><br>
                                <span>5 years</span>
                            </div>
                            <div>
                                <strong>Development Period:</strong><br>
                                <span id="reportDevelopmentPeriod">12 months</span>
                            </div>
                            <div>
                                <strong>Monthly Debt Service:</strong><br>
                                <span id="reportDebtService">€4,208</span>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Performance Metrics Section -->
                <div class="report-section">
                    <h3><i class="fas fa-chart-bar"></i> Financial Performance</h3>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 2rem;">
                        <!-- Project Level Metrics -->
                        <div>
                            <h4>Project Level Returns</h4>
                            <table class="data-table">
                                <tbody>
                                    <tr>
                                        <td><strong>Annual Net Profit</strong></td>
                                        <td class="number" id="reportProjectProfit">€288,240</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Annual Project ROI</strong></td>
                                        <td class="number" id="reportProjectROI">75.9%</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Total Project ROI</strong></td>
                                        <td class="number" id="reportTotalProjectROI">379.5%</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Project IRR</strong></td>
                                        <td class="number" id="reportProjectIRR">85.2%</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Project Payback</strong></td>
                                        <td class="number" id="reportProjectPayback">1.3 years</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        
                        <!-- Equity Level Metrics -->
                        <div>
                            <h4>Shareholder Returns (After Debt Service)</h4>
                            <table class="data-table">
                                <tbody>
                                    <tr>
                                        <td><strong>Annual Cash Flow to Equity</strong></td>
                                        <td class="number" id="reportEquityCashFlow">€237,744</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Annual Equity ROI</strong></td>
                                        <td class="number" id="reportEquityROI">156.4%</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Equity Multiple</strong></td>
                                        <td class="number" id="reportEquityMultiple">8.8x</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Equity IRR</strong></td>
                                        <td class="number" id="reportEquityIRR">192.8%</td>
                                    </tr>
                                    <tr>
                                        <td><strong>Equity Payback</strong></td>
                                        <td class="number" id="reportEquityPayback">0.6 years</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Calculation Breakdown Section -->
                <div class="report-section">
                    <h3><i class="fas fa-calculator"></i> Calculation Breakdown</h3>
                    <div class="calculation-breakdown">
                        <div class="breakdown-section">
                            <h4>Current Parameters Being Used</h4>
                            <div class="parameters-display" id="currentParametersDisplay">
                                <div class="param-row">
                                    <span class="param-label">Number of Courts:</span>
                                    <span class="param-value" id="paramCourts">—</span>
                                </div>
                                <div class="param-row">
                                    <span class="param-label">Hourly Rate:</span>
                                    <span class="param-value" id="paramRate">—</span>
                                </div>
                                <div class="param-row">
                                    <span class="param-label">Occupancy Rate:</span>
                                    <span class="param-value" id="paramOccupancy">—</span>
                                </div>
                                <div class="param-row">
                                    <span class="param-label">Hours per Day:</span>
                                    <span class="param-value" id="paramHours">—</span>
                                </div>
                                <div class="param-row">
                                    <span class="param-label">Days per Year:</span>
                                    <span class="param-value" id="paramDays">—</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="breakdown-section">
                            <h4>Revenue Calculation</h4>
                            <div class="formula-display" id="revenueBreakdown">
                                <div class="formula-row">
                                    <span class="formula-label">Court Rental Revenue:</span>
                                    <span class="formula-value" id="formulaCourtRevenue">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Pro Shop Revenue:</span>
                                    <span class="formula-value" id="formulaProShop">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">F&B Revenue:</span>
                                    <span class="formula-value" id="formulaFB">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Event Revenue:</span>
                                    <span class="formula-value" id="formulaEvents">—</span>
                                </div>
                                <div class="formula-row total-row">
                                    <span class="formula-label"><strong>Total Revenue:</strong></span>
                                    <span class="formula-value" id="formulaTotalRevenue"><strong>—</strong></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="breakdown-section">
                            <h4>Cost Calculation</h4>
                            <div class="formula-display" id="costBreakdown">
                                <div class="formula-row">
                                    <span class="formula-label">Land Rental:</span>
                                    <span class="formula-value" id="formulaLandRental">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Maintenance:</span>
                                    <span class="formula-value" id="formulaMaintenance">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Salaries:</span>
                                    <span class="formula-value" id="formulaSalaries">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Utilities:</span>
                                    <span class="formula-value" id="formulaUtilities">—</span>
                                </div>
                                <div class="formula-row total-row">
                                    <span class="formula-label"><strong>Total Costs:</strong></span>
                                    <span class="formula-value" id="formulaTotalCosts"><strong>—</strong></span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="breakdown-section">
                            <h4>Profit & ROI Calculation</h4>
                            <div class="formula-display" id="profitBreakdown">
                                <div class="formula-row">
                                    <span class="formula-label">Annual Net Profit:</span>
                                    <span class="formula-value" id="formulaNetProfit">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Total Investment:</span>
                                    <span class="formula-value" id="formulaTotalInvestment">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Annual Project ROI:</span>
                                    <span class="formula-value" id="formulaProjectROI">—</span>
                                </div>
                            </div>
                        </div>
                        
                        <div class="breakdown-section">
                            <h4>Financing & Equity Returns</h4>
                            <div class="formula-display" id="financingBreakdown">
                                <div class="formula-row">
                                    <span class="formula-label">Loan Amount:</span>
                                    <span class="formula-value" id="formulaLoanAmount">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Equity Investment:</span>
                                    <span class="formula-value" id="formulaEquityInvestment">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Annual Debt Service:</span>
                                    <span class="formula-value" id="formulaDebtService">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Cash Flow to Equity:</span>
                                    <span class="formula-value" id="formulaCashFlow">—</span>
                                </div>
                                <div class="formula-row">
                                    <span class="formula-label">Equity ROI:</span>
                                    <span class="formula-value" id="formulaEquityROI">—</span>
                                </div>
                            </div>
                        </div>

                        <div class="breakdown-notice">
                            <div class="notice-content">
                                <i class="fas fa-info-circle"></i>
                                <div>
                                    <strong>Data Source:</strong> All calculations update in real-time based on input parameters above. 
                                    If you see different numbers in the Financial Performance section, check if previous settings 
                                    were saved to your browser's localStorage.
                                </div>
                            </div>
                            <button class="btn btn-warning" onclick="clearLocalStorageAndReset()" style="margin-top: 1rem;">
                                <i class="fas fa-refresh"></i> Reset to Default Values
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Scenarios Tab -->
            <div id="scenarios-tab" class="tab-panel">
                <h2 style="margin-bottom: 1rem; color: var(--text);">Scenario Analysis</h2>
                
                <div style="margin-bottom: 2rem; display: flex; gap: 1rem; flex-wrap: wrap;">
                    <button class="btn btn-primary" onclick="saveCurrentScenario()">
                        <i class="fas fa-save"></i> Save Current Scenario
                    </button>
                    <button class="btn" onclick="showScenarioManager()">
                        <i class="fas fa-cog"></i> Manage Scenarios
                    </button>
                    <button class="btn" onclick="exportScenarios()">
                        <i class="fas fa-download"></i> Export Scenarios
                    </button>
                    <input type="file" id="scenarioFileInput" accept=".json" style="display: none;" onchange="importScenarios(event)">
                    <button class="btn" onclick="document.getElementById('scenarioFileInput').click()">
                        <i class="fas fa-upload"></i> Import Scenarios
                    </button>
                </div>

                <div class="scenarios-grid">
                    <div class="scenario-card" onclick="loadScenario('basic')">
                        <div class="scenario-header">
                            <i class="fas fa-dumbbell"></i>
                            Basic Courts Only
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Investment</span>
                            <span class="scenario-metric-value">€380,000</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Occupancy Rate</span>
                            <span class="scenario-metric-value">47%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Hourly Rate</span>
                            <span class="scenario-metric-value">€33</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Annual Profit</span>
                            <span class="scenario-metric-value" id="basicProfit">€267,000</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Project ROI | IRR</span>
                            <span class="scenario-metric-value" id="basicROI">70.3% | 78.5%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Equity ROI | IRR</span>
                            <span class="scenario-metric-value" id="basicEquityROI">125.2% | 142.8%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Payback Period</span>
                            <span class="scenario-metric-value" id="basicPayback">1.4 years</span>
                        </div>
                    </div>

                    <div class="scenario-card" onclick="loadScenario('premium')">
                        <div class="scenario-header">
                            <i class="fas fa-star"></i>
                            Premium Padeliko
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Investment</span>
                            <span class="scenario-metric-value">€580,000</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Occupancy Rate</span>
                            <span class="scenario-metric-value">60%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Hourly Rate</span>
                            <span class="scenario-metric-value">€37</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Annual Profit</span>
                            <span class="scenario-metric-value" id="premiumProfit">€450,000</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Project ROI | IRR</span>
                            <span class="scenario-metric-value" id="premiumROI">77.6% | 89.2%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Equity ROI | IRR</span>
                            <span class="scenario-metric-value" id="premiumEquityROI">135.8% | 168.4%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Payback Period</span>
                            <span class="scenario-metric-value" id="premiumPayback">1.3 years</span>
                        </div>
                    </div>


                    <div class="scenario-card active">
                        <div class="scenario-header">
                            <i class="fas fa-user-cog"></i>
                            Current Settings
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Occupancy Rate</span>
                            <span class="scenario-metric-value" id="currentOccupancy">50%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Hourly Rate</span>
                            <span class="scenario-metric-value" id="currentPrice">€28</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Annual Profit</span>
                            <span class="scenario-metric-value" id="currentProfit">€288,240</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Project ROI | IRR</span>
                            <span class="scenario-metric-value" id="currentROI">75.9% | 85.2%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Equity ROI | IRR</span>
                            <span class="scenario-metric-value" id="currentEquityROI">128.6% | 158.7%</span>
                        </div>
                        <div class="scenario-metric">
                            <span class="scenario-metric-label">Payback Period</span>
                            <span class="scenario-metric-value" id="currentPayback">1.3 years</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sensitivity Tab -->
            <div id="sensitivity-tab" class="tab-panel">
                <h2 style="margin-bottom: 2rem; color: var(--text);">Sensitivity Analysis</h2>
                
                <div class="sensitivity-container">
                    <!-- Primary Sensitivity Table: Occupancy vs Price -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-chart-area"></i> Annual Profit: Occupancy Rate vs Hourly Rate</h3>
                        <div class="sensitivity-info">
                            <p>Interactive table showing annual profit at different occupancy rates and pricing levels. Click any cell to apply those parameters.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="occupancyPriceTable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">Occupancy ↓ / Price →</th>
                                        <th>€20</th>
                                        <th>€24</th>
                                        <th>€28</th>
                                        <th>€32</th>
                                        <th>€36</th>
                                        <th>€40</th>
                                    </tr>
                                </thead>
                                <tbody id="occupancyPriceBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="sensitivity-legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Low Profit (&lt;€100k)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Medium Profit (€100k-€400k)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> High Profit (&gt;€400k)</span>
                        </div>
                    </div>

                    <!-- Secondary Sensitivity Table: Price vs Occupancy -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-euro-sign"></i> Payback Period: Hourly Rate vs Occupancy Rate</h3>
                        <div class="sensitivity-info">
                            <p>Payback period in years for different pricing strategies and occupancy rates. Helps optimize revenue per court.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="priceOccupancyTable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">Price ↓ / Occupancy →</th>
                                        <th>30%</th>
                                        <th>40%</th>
                                        <th>50%</th>
                                        <th>60%</th>
                                        <th>70%</th>
                                    </tr>
                                </thead>
                                <tbody id="priceOccupancyBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="sensitivity-legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Long Payback (&gt;5 years)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Moderate Payback (2-5 years)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> Fast Payback (&lt;2 years)</span>
                        </div>
                    </div>

                    <!-- Third Sensitivity Table: Courts vs Price - ROI -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-chart-line"></i> Payback Period (Years): Number of Courts vs Hourly Rate</h3>
                        <div class="sensitivity-info">
                            <p>Payback period in years for different facility sizes and pricing strategies. Shows how quickly investments are recovered through profits.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="courtsRoiTable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">Courts ↓ / Rate →</th>
                                        <th>€28</th>
                                        <th>€32</th>
                                        <th>€36</th>
                                        <th>€40</th>
                                        <th>€44</th>
                                    </tr>
                                </thead>
                                <tbody id="courtsRoiBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="sensitivity-legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Low ROI (&lt;30%)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Medium ROI (30-80%)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> High ROI (&gt;80%)</span>
                        </div>
                    </div>

                    <!-- Fourth Sensitivity Table: Investment Scenarios vs Annual Profit -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-coins"></i> Annual Profit: Investment Level vs Occupancy Rate</h3>
                        <div class="sensitivity-info">
                            <p>Annual profit comparison between basic courts setup vs premium facilities investment across different occupancy levels.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="investmentProfitTable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">Investment ↓ / Occupancy →</th>
                                        <th>40%</th>
                                        <th>50%</th>
                                        <th>60%</th>
                                        <th>70%</th>
                                    </tr>
                                </thead>
                                <tbody id="investmentProfitBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="sensitivity-legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Low Profit (&lt;€200k)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Medium Profit (€200k-€500k)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> High Profit (&gt;€500k)</span>
                        </div>
                    </div>

                    <!-- Fifth Sensitivity Table: Ancillary Revenue vs Occupancy -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-shopping-cart"></i> Total Revenue: F&B Revenue vs Pro Shop Revenue</h3>
                        <div class="sensitivity-info">
                            <p>Impact of ancillary revenue streams on total business revenue. Shows the importance of diversified income sources.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="ancillaryRevenueTable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">F&B ↓ / Pro Shop →</th>
                                        <th>€10k</th>
                                        <th>€15k</th>
                                        <th>€20k</th>
                                        <th>€25k</th>
                                        <th>€30k</th>
                                    </tr>
                                </thead>
                                <tbody id="ancillaryRevenueBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="sensitivity-legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Low Revenue (&lt;€600k)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Medium Revenue (€600k-€800k)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> High Revenue (&gt;€800k)</span>
                        </div>
                    </div>

                    <!-- Financing ROI Sensitivity Table -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-university"></i> Shareholder ROI: Interest Rate vs Financing %</h3>
                        <div class="sensitivity-info">
                            <p>Shareholder return on equity at different interest rates and financing levels. Shows impact of leverage on equity returns.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="financingROITable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">Rate ↓ / Finance % →</th>
                                        <th>0%</th>
                                        <th>20%</th>
                                        <th>40%</th>
                                        <th>60%</th>
                                        <th>80%</th>
                                    </tr>
                                </thead>
                                <tbody id="financingROIBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Low ROI (&lt;50%)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Medium ROI (50%-150%)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> High ROI (&gt;150%)</span>
                        </div>
                    </div>

                    <!-- Financing IRR Sensitivity Table -->
                    <div class="sensitivity-section">
                        <h3><i class="fas fa-chart-line"></i> Shareholder IRR: Interest Rate vs Financing %</h3>
                        <div class="sensitivity-info">
                            <p>5-year IRR for equity investors at different interest rates and financing levels. Includes development period and terminal value assumptions.</p>
                        </div>
                        <div class="sensitivity-table-wrapper">
                            <table class="sensitivity-table" id="financingIRRTable">
                                <thead>
                                    <tr>
                                        <th class="corner-cell">Rate ↓ / Finance % →</th>
                                        <th>0%</th>
                                        <th>20%</th>
                                        <th>40%</th>
                                        <th>60%</th>
                                        <th>80%</th>
                                    </tr>
                                </thead>
                                <tbody id="financingIRRBody">
                                    <!-- Table content will be generated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                        <div class="legend">
                            <span class="legend-item"><span class="legend-color legend-red"></span> Low IRR (&lt;20%)</span>
                            <span class="legend-item"><span class="legend-color legend-yellow"></span> Medium IRR (20%-40%)</span>
                            <span class="legend-item"><span class="legend-color legend-green"></span> High IRR (&gt;40%)</span>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Bank Presentation Tab -->
            <div id="bank-presentation-tab" class="tab-panel">
                <!-- Executive Hero Section -->
                <div class="presentation-hero">
                    <div class="hero-background"></div>
                    <div class="hero-content">
                        <h1 class="hero-title">Investment Opportunity</h1>
                        <h2 class="hero-subtitle">Premium Padel Court Facility - Limassol, Cyprus</h2>
                        <div class="hero-metrics">
                            <div class="hero-metric-card">
                                <div class="metric-icon"><i class="fas fa-euro-sign"></i></div>
                                <div class="metric-content">
                                    <div class="metric-value" id="heroTotalInvestment">€630,000</div>
                                    <div class="metric-label">Total Investment</div>
                                </div>
                            </div>
                            <div class="hero-metric-card">
                                <div class="metric-icon"><i class="fas fa-university"></i></div>
                                <div class="metric-content">
                                    <div class="metric-value" id="heroFinancingRequest">€378,000</div>
                                    <div class="metric-label">Financing Request</div>
                                </div>
                            </div>
                            <div class="hero-metric-card">
                                <div class="metric-icon"><i class="fas fa-chart-line"></i></div>
                                <div class="metric-content">
                                    <div class="metric-value" id="heroProjectedROI">156.4%</div>
                                    <div class="metric-label">Projected Equity ROI</div>
                                </div>
                            </div>
                            <div class="hero-metric-card">
                                <div class="metric-icon"><i class="fas fa-clock"></i></div>
                                <div class="metric-content">
                                    <div class="metric-value" id="heroPaybackPeriod">0.6 years</div>
                                    <div class="metric-label">Payback Period</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Investment Highlights -->
                <div class="presentation-section">
                    <div class="section-header">
                        <h2><i class="fas fa-star"></i> Investment Highlights</h2>
                    </div>
                    <div class="highlights-grid">
                        <div class="highlight-card">
                            <div class="highlight-icon"><i class="fas fa-map-marker-alt"></i></div>
                            <h3>Prime Location</h3>
                            <p>Strategic location in Limassol, Cyprus - Europe's fastest-growing padel market with year-round playing conditions.</p>
                        </div>
                        <div class="highlight-card">
                            <div class="highlight-icon"><i class="fas fa-users"></i></div>
                            <h3>Growing Market</h3>
                            <p>Padel is the world's fastest-growing sport with 25M+ players globally and explosive growth in Mediterranean markets.</p>
                        </div>
                        <div class="highlight-card">
                            <div class="highlight-icon"><i class="fas fa-trophy"></i></div>
                            <h3>Premium Facilities</h3>
                            <p id="highlightCourts">8 regulation courts with professional lighting, modern amenities, and additional revenue streams.</p>
                        </div>
                        <div class="highlight-card">
                            <div class="highlight-icon"><i class="fas fa-shield-alt"></i></div>
                            <h3>Conservative Projections</h3>
                            <p id="highlightOccupancy">Break-even at just 20% occupancy. Base case assumes 50% occupancy with significant upside potential.</p>
                        </div>
                    </div>
                </div>

                <!-- Financial Performance Dashboard -->
                <div class="presentation-section">
                    <div class="section-header">
                        <h2><i class="fas fa-chart-area"></i> Financial Performance</h2>
                    </div>
                    <div class="performance-grid">
                        <div class="performance-card">
                            <h3>5-Year Revenue Projection</h3>
                            <canvas id="revenueChart" width="400" height="200"></canvas>
                            <div class="chart-summary">
                                <span>Annual Revenue: <strong id="perfAnnualRevenue">€530,840</strong></span>
                            </div>
                        </div>
                        <div class="performance-card">
                            <h3>ROI & IRR Comparison</h3>
                            <div class="roi-bars">
                                <div class="roi-bar-container">
                                    <div class="roi-bar-label">Project ROI</div>
                                    <div class="roi-bar-wrapper">
                                        <div class="roi-bar project-roi" id="projectROIBar"></div>
                                        <span class="roi-value" id="perfProjectROI">75.9%</span>
                                    </div>
                                </div>
                                <div class="roi-bar-container">
                                    <div class="roi-bar-label">Equity ROI</div>
                                    <div class="roi-bar-wrapper">
                                        <div class="roi-bar equity-roi" id="equityROIBar"></div>
                                        <span class="roi-value" id="perfEquityROI">156.4%</span>
                                    </div>
                                </div>
                                <div class="roi-bar-container">
                                    <div class="roi-bar-label">Project IRR</div>
                                    <div class="roi-bar-wrapper">
                                        <div class="roi-bar project-irr" id="projectIRRBar"></div>
                                        <span class="roi-value" id="perfProjectIRR">85.2%</span>
                                    </div>
                                </div>
                                <div class="roi-bar-container">
                                    <div class="roi-bar-label">Equity IRR</div>
                                    <div class="roi-bar-wrapper">
                                        <div class="roi-bar equity-irr" id="equityIRRBar"></div>
                                        <span class="roi-value" id="perfEquityIRR">192.8%</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Financing Structure -->
                <div class="presentation-section">
                    <div class="section-header">
                        <h2><i class="fas fa-calculator"></i> Financing Structure</h2>
                    </div>
                    <div class="financing-visual">
                        <div class="financing-pie">
                            <div class="pie-chart" id="financingPieChart">
                                <canvas id="financingCanvas" width="200" height="200"></canvas>
                            </div>
                            <div class="financing-legend">
                                <div class="legend-item">
                                    <div class="legend-color debt"></div>
                                    <span>Bank Financing: <strong id="finDebtAmount">€378,000 (60%)</strong></span>
                                </div>
                                <div class="legend-item">
                                    <div class="legend-color equity"></div>
                                    <span>Equity Investment: <strong id="finEquityAmount">€252,000 (40%)</strong></span>
                                </div>
                            </div>
                        </div>
                        <div class="financing-details">
                            <div class="financing-detail">
                                <i class="fas fa-percentage"></i>
                                <div>
                                    <strong>Interest Rate</strong>
                                    <span id="finInterestRate">4.0% annually</span>
                                </div>
                            </div>
                            <div class="financing-detail">
                                <i class="fas fa-calendar"></i>
                                <div>
                                    <strong>Loan Term</strong>
                                    <span>5 years</span>
                                </div>
                            </div>
                            <div class="financing-detail">
                                <i class="fas fa-money-bill-wave"></i>
                                <div>
                                    <strong>Monthly Payment</strong>
                                    <span id="finMonthlyPayment">€6,967</span>
                                </div>
                            </div>
                            <div class="financing-detail">
                                <i class="fas fa-chart-line"></i>
                                <div>
                                    <strong>Debt Service Coverage</strong>
                                    <span id="finDSCR">3.4x</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Risk Analysis -->
                <div class="presentation-section">
                    <div class="section-header">
                        <h2><i class="fas fa-shield-alt"></i> Risk Analysis & Mitigation</h2>
                    </div>
                    <div class="risk-grid">
                        <div class="scenario-comparison">
                            <h3>Scenario Analysis</h3>
                            <div class="scenario-bars">
                                <div class="scenario-bar">
                                    <div class="scenario-label">Conservative (40% occupancy)</div>
                                    <div class="scenario-value">ROI: <span id="conservativeROI">45%</span></div>
                                </div>
                                <div class="scenario-bar">
                                    <div class="scenario-label">Base Case (50% occupancy)</div>
                                    <div class="scenario-value">ROI: <span id="baseCaseROI">156%</span></div>
                                </div>
                                <div class="scenario-bar">
                                    <div class="scenario-label">Optimistic (60% occupancy)</div>
                                    <div class="scenario-value">ROI: <span id="optimisticROI">210%</span></div>
                                </div>
                            </div>
                        </div>
                        <div class="risk-factors">
                            <h3>Risk Mitigation</h3>
                            <div class="risk-item">
                                <i class="fas fa-check-circle"></i>
                                <div>
                                    <strong>Market Risk:</strong> Diversified revenue streams beyond court rentals
                                </div>
                            </div>
                            <div class="risk-item">
                                <i class="fas fa-check-circle"></i>
                                <div>
                                    <strong>Operational Risk:</strong> Experienced management team and proven business model
                                </div>
                            </div>
                            <div class="risk-item">
                                <i class="fas fa-check-circle"></i>
                                <div>
                                    <strong>Financial Risk:</strong> Strong debt service coverage and conservative projections
                                </div>
                            </div>
                            <div class="risk-item">
                                <i class="fas fa-check-circle"></i>
                                <div>
                                    <strong>Location Risk:</strong> Prime location with established foot traffic and visibility
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Call to Action -->
                <div class="presentation-section cta-section">
                    <div class="cta-content">
                        <h2>Investment Request</h2>
                        <p class="cta-description">
                            We are seeking <strong id="ctaFinancingAmount">€378,000</strong> in financing to develop this premium padel court facility. 
                            The investment offers exceptional returns with strong downside protection and multiple exit strategies.
                        </p>
                        <div class="cta-highlights">
                            <div class="cta-highlight">
                                <i class="fas fa-handshake"></i>
                                <div>
                                    <strong>Partnership Opportunity</strong>
                                    <span>Join Europe's fastest-growing sport</span>
                                </div>
                            </div>
                            <div class="cta-highlight">
                                <i class="fas fa-trophy"></i>
                                <div>
                                    <strong>Proven Returns</strong>
                                    <span>Conservative projections, exceptional upside</span>
                                </div>
                            </div>
                            <div class="cta-highlight">
                                <i class="fas fa-clock"></i>
                                <div>
                                    <strong>Quick Payback</strong>
                                    <span id="ctaPayback">0.6 years to full return</span>
                                </div>
                            </div>
                        </div>
                        <div class="cta-actions">
                            <button class="cta-button primary" onclick="downloadPresentation()">
                                <i class="fas fa-download"></i>
                                Download Full Presentation
                            </button>
                            <button class="cta-button secondary" onclick="scheduleCall()">
                                <i class="fas fa-phone"></i>
                                Schedule Discussion
                            </button>
                        </div>
                        <div class="contact-info">
                            <p><strong>Next Steps:</strong> We welcome the opportunity to discuss this investment in detail and answer any questions.</p>
                            <p><i class="fas fa-envelope"></i> Email: investment@padelfacility.cy | <i class="fas fa-phone"></i> Phone: +357 99 123 456</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Toast Notification -->
    <div class="toast" id="toast">
        <i class="fas fa-check-circle"></i>
        <span class="toast-message">Settings saved!</span>
    </div>

    <!-- Scenario Management Modal -->
    <div id="scenarioModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Scenario Management</h2>
                <button class="modal-close" onclick="closeScenarioModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div id="customScenarios">
                    <h3>Custom Scenarios</h3>
                    <div id="scenariosList">
                        <!-- Custom scenarios will be loaded here -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Save Scenario Modal -->
    <div id="saveScenarioModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Save Current Scenario</h2>
                <button class="modal-close" onclick="closeSaveScenarioModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div style="margin-bottom: 1rem;">
                    <label for="scenarioName">Scenario Name:</label>
                    <input type="text" id="scenarioName" placeholder="Enter scenario name" style="width: 100%; padding: 0.5rem; border: 1px solid var(--border); border-radius: 4px;">
                </div>
                <div style="margin-bottom: 1rem;">
                    <label for="scenarioDescription">Description (optional):</label>
                    <textarea id="scenarioDescription" placeholder="Enter scenario description" style="width: 100%; padding: 0.5rem; border: 1px solid var(--border); border-radius: 4px; height: 100px; resize: vertical;"></textarea>
                </div>
                <div style="display: flex; gap: 1rem; justify-content: flex-end;">
                    <button class="btn" onclick="closeSaveScenarioModal()">Cancel</button>
                    <button class="btn btn-primary" onclick="confirmSaveScenario()">Save Scenario</button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Initialize variables
        let autoSaveTimer;

        // Theme toggle
        function toggleTheme() {
            const isDark = document.documentElement.getAttribute('data-theme') === 'dark';
            document.documentElement.setAttribute('data-theme', isDark ? 'light' : 'dark');
            document.getElementById('themeIcon').className = isDark ? 'fas fa-moon' : 'fas fa-sun';
            localStorage.setItem('theme', isDark ? 'light' : 'dark');
        }

        // Handle window resize for responsive charts
        let resizeTimeout;
        window.addEventListener('resize', function() {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function() {
                // Redraw Bank Presentation charts if visible
                const bankPresentationTab = document.getElementById('bank-presentation-tab');
                if (bankPresentationTab && !bankPresentationTab.classList.contains('hidden')) {
                    const results = calculateModel();
                    updateBankPresentationCharts(results);
                }
            }, 150);
        });

        // Load theme preference
        document.addEventListener('DOMContentLoaded', () => {
            const savedTheme = localStorage.getItem('theme') || 'light';
            document.documentElement.setAttribute('data-theme', savedTheme);
            document.getElementById('themeIcon').className = savedTheme === 'dark' ? 'fas fa-sun' : 'fas fa-moon';
            
            // Initialize
            initializeInputs();
            
            // Always load defaults first to ensure all fields have values
            const defaults = {
                numCourts: 8,
                costPerCourt: 35000,
                infrastructureCost: 100000,
                additionalFacilities: 100000,
                hourlyRate: 28,
                occupancyRate: 50,
                hoursPerDay: 12,
                daysPerYear: 360,
                landRental: 120000,
                maintenancePerCourt: 2200,
                waterCost: 8000,
                electricityCost: 15000,
                managerSalary: 42000,
                instructorSalary: 19800,
                receptionSalary: 14400,
                maintenanceStaffSalary: 16800,
                proShopRevenue: 15000,
                fbRevenue: 20000,
                eventsPerYear: 6,
                revenuePerEvent: 2000,
                vatRate: 5,
                playtomicCommission: 4,
                projectPeriod: 5
            };
            
            // Set default values
            Object.keys(defaults).forEach(key => {
                const element = document.getElementById(key);
                if (element) {
                    if (element.classList.contains('amount-input')) {
                        // Format amount inputs
                        element.value = formatNumberInput(defaults[key]);
                    } else {
                        element.value = defaults[key];
                    }
                }
            });
            
            // Then try to load saved settings if they exist
            const hasSavedSettings = localStorage.getItem('padelModelSettings');
            if (hasSavedSettings) {
                loadSettings(true); // Silent load on startup
            }
            
            updateRangeDisplays();
            updateAll();
            generateSensitivityTables();
            updateReport();
            
            // Force update financing report after a brief delay to ensure all elements are loaded
            setTimeout(() => {
                const results = calculateModel();
                updateTables(results);
                
                // Initialize Bank Presentation charts
                updateBankPresentationCharts(results);
                
                // Ensure calculation breakdown is updated
                updateCalculationBreakdown(results);
            }, 100);
        });

        // IRR and NPV calculation functions
        function calculateNPV(cashFlows, discountRate) {
            let npv = 0;
            for (let i = 0; i < cashFlows.length; i++) {
                npv += cashFlows[i] / Math.pow(1 + discountRate, i);
            }
            return npv;
        }

        function calculateIRR(cashFlows, guess = 0.1, maxIterations = 100, precision = 0.0001) {
            // Newton-Raphson method
            let rate = guess;
            
            for (let i = 0; i < maxIterations; i++) {
                let npv = calculateNPV(cashFlows, rate);
                
                if (Math.abs(npv) < precision) {
                    return rate;
                }
                
                // Calculate derivative (NPV')
                let npvDerivative = 0;
                for (let j = 0; j < cashFlows.length; j++) {
                    npvDerivative -= j * cashFlows[j] / Math.pow(1 + rate, j + 1);
                }
                
                if (Math.abs(npvDerivative) < precision) {
                    break;
                }
                
                rate = rate - npv / npvDerivative;
            }
            
            return rate;
        }

        // Loan payment calculation
        function calculateLoanPayment(principal, annualRate, years) {
            if (principal === 0 || annualRate === 0) return 0;
            
            const monthlyRate = annualRate / 12;
            const numPayments = years * 12;
            
            return principal * (monthlyRate * Math.pow(1 + monthlyRate, numPayments)) / 
                   (Math.pow(1 + monthlyRate, numPayments) - 1);
        }

        // Development interest calculation
        function calculateDevelopmentInterest(loanAmount, annualRate, months, isCapitalized) {
            if (loanAmount === 0 || annualRate === 0 || months === 0) return 0;
            
            const monthlyRate = annualRate / 12;
            let totalInterest = 0;
            
            if (isCapitalized) {
                // Compound monthly
                totalInterest = loanAmount * (Math.pow(1 + monthlyRate, months) - 1);
            } else {
                // Simple interest paid monthly
                totalInterest = loanAmount * annualRate * (months / 12);
            }
            
            return totalInterest;
        }

        // Calculate financial model
        function calculateModel() {
            const params = {
                numCourts: parseInt(document.getElementById('numCourts').value),
                costPerCourt: parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)),
                infrastructureCost: parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)),
                additionalFacilities: parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value)),
                hourlyRate: parseFloat(document.getElementById('hourlyRate').value),
                occupancyRate: parseFloat(document.getElementById('occupancyRate').value) / 100,
                hoursPerDay: parseInt(document.getElementById('hoursPerDay').value),
                daysPerYear: parseInt(unformatNumberInput(document.getElementById('daysPerYear').value)),
                landRental: parseFloat(unformatNumberInput(document.getElementById('landRental').value)),
                maintenancePerCourt: parseFloat(unformatNumberInput(document.getElementById('maintenancePerCourt').value)),
                waterCost: parseFloat(unformatNumberInput(document.getElementById('waterCost').value)),
                electricityCost: parseFloat(unformatNumberInput(document.getElementById('electricityCost').value)),
                managerSalary: parseFloat(unformatNumberInput(document.getElementById('managerSalary').value)),
                instructorSalary: parseFloat(unformatNumberInput(document.getElementById('instructorSalary').value)),
                receptionSalary: parseFloat(unformatNumberInput(document.getElementById('receptionSalary').value)),
                maintenanceStaffSalary: parseFloat(unformatNumberInput(document.getElementById('maintenanceStaffSalary').value)),
                proShopRevenue: parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value)),
                fbRevenue: parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value)),
                eventsPerYear: parseInt(unformatNumberInput(document.getElementById('eventsPerYear').value)),
                revenuePerEvent: parseFloat(unformatNumberInput(document.getElementById('revenuePerEvent').value)),
                // VAT & Platform fees
                vatRate: parseFloat(document.getElementById('vatRate').value),
                playtomicCommission: parseFloat(document.getElementById('playtomicCommission').value),
                // Financing parameters
                financingPercentage: parseFloat(document.getElementById('financingPercentage').value) / 100,
                interestRate: parseFloat(document.getElementById('interestRate').value) / 100,
                loanTerm: parseInt(document.getElementById('loanTerm').value),
                developmentMonths: parseInt(document.getElementById('developmentMonths').value),
                developmentInterest: document.getElementById('developmentInterest').value,
                projectPeriod: parseInt(document.getElementById('projectPeriod').value)
            };

            const totalInvestment = (params.numCourts * params.costPerCourt) + params.infrastructureCost + params.additionalFacilities;
            
            // Gross court rental revenue (what customers pay, VAT inclusive)
            const grossCourtRevenue = params.numCourts * params.hourlyRate * params.hoursPerDay * 
                                     params.daysPerYear * params.occupancyRate;
            
            // VAT calculation (VAT is included in gross price)
            const vatAmount = grossCourtRevenue * (params.vatRate / (100 + params.vatRate));
            const revenueAfterVAT = grossCourtRevenue - vatAmount;
            
            // Playtomic commission (on gross revenue before VAT deduction)
            const playtomicCommissionAmount = grossCourtRevenue * (params.playtomicCommission / 100);
            
            // Net court revenue (after both VAT and Playtomic)
            const netCourtRevenue = grossCourtRevenue - vatAmount - playtomicCommissionAmount;
            
            const eventRevenue = params.eventsPerYear * params.revenuePerEvent;
            
            // Total net revenue (court + ancillary, assuming ancillary is net)
            const totalRevenue = netCourtRevenue + params.proShopRevenue + params.fbRevenue + eventRevenue;
            
            const totalMaintenance = params.numCourts * params.maintenancePerCourt;
            const totalSalaries = params.managerSalary + params.instructorSalary + 
                                params.receptionSalary + params.maintenanceStaffSalary;
            const totalExpenses = params.landRental + totalMaintenance + totalSalaries + params.waterCost + params.electricityCost;
            
            // Financing calculations
            const loanAmount = totalInvestment * params.financingPercentage;
            const equityInvestment = totalInvestment - loanAmount;
            
            // Development period calculations
            const developmentInterestTotal = calculateDevelopmentInterest(
                loanAmount, 
                params.interestRate, 
                params.developmentMonths, 
                params.developmentInterest === 'capitalized'
            );
            
            // Keep total project cost as base investment only to avoid circular reference
            // Development interest will be handled separately in financing calculations
            const totalProjectCost = totalInvestment;
            
            const adjustedLoanAmount = params.developmentInterest === 'capitalized' 
                ? loanAmount + developmentInterestTotal 
                : loanAmount;
            
            // Annual loan payments (after development)
            const monthlyLoanPayment = calculateLoanPayment(adjustedLoanAmount, params.interestRate, params.loanTerm);
            const annualDebtService = monthlyLoanPayment * 12;
            
            // Cash flows
            const netProfit = totalRevenue - totalExpenses;
            const netCashFlow = netProfit - annualDebtService;
            
            // Traditional metrics (project level)
            const annualROI = (netProfit / totalProjectCost) * 100;
            const cumulativeROI = (netProfit * params.projectPeriod / totalProjectCost) * 100;
            const roi = annualROI; // Keep roi for backward compatibility
            const paybackPeriod = netProfit > 0 ? totalProjectCost / netProfit : 999;
            
            // Equity metrics
            const annualEquityROI = equityInvestment > 0 ? (netCashFlow / equityInvestment) * 100 : 0;
            const cumulativeEquityROI = equityInvestment > 0 ? (netCashFlow * params.projectPeriod / equityInvestment) * 100 : 0;
            const equityMultiple = equityInvestment > 0 ? (netCashFlow * params.projectPeriod + equityInvestment) / equityInvestment : 0;
            const equityROI = annualEquityROI; // Keep equityROI for backward compatibility
            const equityPaybackPeriod = netCashFlow > 0 ? equityInvestment / netCashFlow : 999;
            
            // Calculate cash flows for IRR (development year + 5 operational years)
            const cashFlows = [];
            const equityCashFlows = [];
            
            // Year 0 (development): Initial investment
            cashFlows.push(-totalProjectCost);
            equityCashFlows.push(-equityInvestment);
            
            // Add development interest if paid monthly (not capitalized)
            if (params.developmentInterest === 'paid' && params.developmentMonths > 0) {
                const monthlyInterest = loanAmount * (params.interestRate / 12);
                equityCashFlows[0] -= (monthlyInterest * params.developmentMonths);
            }
            
            // Years 1 to projectPeriod: Operational cash flows
            for (let year = 1; year <= params.projectPeriod; year++) {
                cashFlows.push(netProfit);
                equityCashFlows.push(netCashFlow);
            }
            
            // Calculate IRRs
            let projectIRR = 0;
            let equityIRR = 0;
            
            try {
                // Add some validation for cash flows
                if (cashFlows.length > 1 && cashFlows.some(cf => cf > 0)) {
                    projectIRR = calculateIRR(cashFlows) * 100;
                    if (isNaN(projectIRR) || !isFinite(projectIRR)) projectIRR = 0;
                } else {
                    projectIRR = 0;
                }
            } catch (e) {
                console.log('Project IRR calculation failed:', e);
                projectIRR = 0;
            }
            
            try {
                if (equityInvestment > 0 && equityCashFlows.length > 1 && equityCashFlows.some(cf => cf > 0)) {
                    equityIRR = calculateIRR(equityCashFlows) * 100;
                    if (isNaN(equityIRR) || !isFinite(equityIRR)) equityIRR = 0;
                } else {
                    equityIRR = 0;
                }
            } catch (e) {
                console.log('Equity IRR calculation failed:', e);
                equityIRR = 0;
            }
            
            const fixedCosts = totalExpenses - (params.proShopRevenue + params.fbRevenue + eventRevenue);
            // Break-even should use net revenue per occupancy percent (after VAT and Playtomic)
            const grossRevenuePerOccupancyPercent = params.numCourts * params.hourlyRate * params.hoursPerDay * 
                                                   params.daysPerYear * 0.01;
            const vatPerOccupancyPercent = grossRevenuePerOccupancyPercent * (params.vatRate / (100 + params.vatRate));
            const playtomicPerOccupancyPercent = grossRevenuePerOccupancyPercent * (params.playtomicCommission / 100);
            const netRevenuePerOccupancyPercent = grossRevenuePerOccupancyPercent - vatPerOccupancyPercent - playtomicPerOccupancyPercent;
            const breakEvenOccupancy = fixedCosts / netRevenuePerOccupancyPercent;
            
            const totalProjectProfit = netProfit * params.projectPeriod;

            // Calculate LTV Ratio (Loan-to-Value)
            const ltvRatio = (loanAmount / totalProjectCost) * 100;

            // Calculate DSCR (Debt Service Coverage Ratio)
            const dscr = annualDebtService > 0 ? (netProfit / annualDebtService) : 0;

            return {
                params,
                totalInvestment: totalProjectCost,  // Use total project cost including dev interest
                baseInvestment: totalInvestment,    // Keep base investment for reference
                grossCourtRevenue,
                vatAmount,
                playtomicCommissionAmount,
                netCourtRevenue,
                courtRentalRevenue: netCourtRevenue,  // Keep for compatibility
                eventRevenue,
                totalRevenue,
                totalMaintenance,
                totalSalaries,
                totalExpenses,
                netProfit,
                roi,
                annualROI,
                cumulativeROI,
                paybackPeriod,
                breakEvenOccupancy,
                fiveYearProfit: totalProjectProfit, // Renamed for backward compatibility
                totalProjectProfit,
                // Financing metrics
                loanAmount,
                equityInvestment,
                developmentInterestTotal,
                adjustedLoanAmount,
                monthlyLoanPayment,
                annualDebtService,
                netCashFlow,
                equityROI,
                annualEquityROI,
                cumulativeEquityROI,
                equityMultiple,
                equityPaybackPeriod,
                projectIRR,
                equityIRR,
                ltvRatio,
                dscr,
                cashFlows,
                equityCashFlows
            };
        }

        // Format currency
        function formatCurrency(value) {
            return '\u20ac' + value.toLocaleString('en-US', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
        }

        // Format number with thousand separators
        function formatNumberInput(value) {
            return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        }

        // Remove formatting from number input
        function unformatNumberInput(value) {
            return value.toString().replace(/,/g, '');
        }

        // Format all number inputs with thousand separators
        function formatAllNumberInputs() {
            document.querySelectorAll('input.amount-input').forEach(input => {
                if (input.value && input.value.trim() !== '') {
                    const value = unformatNumberInput(input.value.toString());
                    if (value && !isNaN(parseFloat(value))) {
                        input.value = formatNumberInput(value);
                    }
                }
            });
        }

        // Update all displays
        function updateAll() {
            const results = calculateModel();
            
            // Update dashboard metrics
            document.getElementById('totalInvestment').textContent = formatCurrency(results.totalInvestment);
            document.getElementById('annualRevenue').textContent = formatCurrency(results.totalRevenue);
            document.getElementById('annualCosts').textContent = formatCurrency(results.totalExpenses);
            document.getElementById('netProfit').textContent = formatCurrency(results.netProfit);
            document.getElementById('roi').textContent = results.annualROI.toFixed(1) + '% | ' + results.cumulativeROI.toFixed(1) + '%';
            document.getElementById('roiPeriodLabel').textContent = 'Annual | ' + results.params.projectPeriod + '-Year Total';
            document.getElementById('equityRoi').textContent = results.annualEquityROI.toFixed(1) + '% | ' + results.equityMultiple.toFixed(1) + 'x';
            document.getElementById('equityRoiLabel').textContent = 'Cash-on-cash | ' + results.params.projectPeriod + '-Year Multiple';
            document.getElementById('paybackPeriod').textContent = results.paybackPeriod.toFixed(1) + ' years';
            document.getElementById('equityInvestment').textContent = formatCurrency(results.equityInvestment);
            document.getElementById('debtService').textContent = formatCurrency(results.annualDebtService);
            document.getElementById('breakEvenOccupancy').textContent = results.breakEvenOccupancy.toFixed(1) + '%';
            document.getElementById('fiveYearProfit').textContent = formatCurrency(results.fiveYearProfit);
            
            // Update summary cards
            document.getElementById('summaryInvestment').textContent = formatCurrency(results.totalInvestment);
            document.getElementById('summaryProfit').textContent = formatCurrency(results.netProfit);
            document.getElementById('summaryROI').textContent = results.roi.toFixed(1) + '%';
            document.getElementById('summaryPayback').textContent = results.paybackPeriod.toFixed(1) + ' years';
            
            // Update tables
            updateTables(results);
            
            // Update scenarios
            updateScenarios();
            
            // Update Bank Presentation
            updateBankPresentation(results);
            
            // Update calculation breakdown
            updateCalculationBreakdown(results);
            
            // Update sensitivity highlights
            if (typeof updateSensitivityHighlights === 'function') {
                updateSensitivityHighlights();
            }
            
            // Auto-save
            autoSave();
        }

        // Update tables
        function updateTables(results) {
            // Investment table
            document.getElementById('investmentDetails').innerHTML = `
                <tr>
                    <td>Padel Courts</td>
                    <td>${results.params.numCourts}</td>
                    <td class="number">${formatCurrency(results.params.costPerCourt)}</td>
                    <td class="number">${formatCurrency(results.params.numCourts * results.params.costPerCourt)}</td>
                </tr>
                <tr>
                    <td>Infrastructure</td>
                    <td>1</td>
                    <td class="number">${formatCurrency(results.params.infrastructureCost)}</td>
                    <td class="number">${formatCurrency(results.params.infrastructureCost)}</td>
                </tr>
                <tr>
                    <td>Additional Facilities (F&B + Pro Shop)</td>
                    <td>1</td>
                    <td class="number">${formatCurrency(results.params.additionalFacilities)}</td>
                    <td class="number">${formatCurrency(results.params.additionalFacilities)}</td>
                </tr>
            `;
            document.getElementById('investmentTotal').textContent = formatCurrency(results.totalInvestment);
            
            // Revenue table
            console.log('Revenue Debug:', {
                grossCourtRevenue: results.grossCourtRevenue,
                vatAmount: results.vatAmount,
                playtomicCommissionAmount: results.playtomicCommissionAmount,
                netCourtRevenue: results.netCourtRevenue,
                vatRate: results.params.vatRate,
                playtomicCommission: results.params.playtomicCommission
            });
            document.getElementById('revenueDetails').innerHTML = `
                <tr>
                    <td><strong>Gross Court Bookings</strong></td>
                    <td>${results.params.numCourts} courts × ${formatCurrency(results.params.hourlyRate)}/hr × ${results.params.hoursPerDay}hrs × ${results.params.daysPerYear} days × ${(results.params.occupancyRate * 100).toFixed(0)}%</td>
                    <td class="number"><strong>${formatCurrency(results.grossCourtRevenue)}</strong></td>
                </tr>
                <tr style="color: #e74c3c;">
                    <td>&nbsp;&nbsp;Less: VAT (${results.params.vatRate}%)</td>
                    <td>Tax to remit</td>
                    <td class="number">(${formatCurrency(results.vatAmount)})</td>
                </tr>
                <tr style="color: #e74c3c;">
                    <td>&nbsp;&nbsp;Less: Playtomic Commission (${results.params.playtomicCommission}%)</td>
                    <td>Platform fee on gross</td>
                    <td class="number">(${formatCurrency(results.playtomicCommissionAmount)})</td>
                </tr>
                <tr style="background-color: #f8f9fa; font-weight: bold;">
                    <td><strong>Net Court Revenue</strong></td>
                    <td>After VAT & fees</td>
                    <td class="number"><strong>${formatCurrency(results.netCourtRevenue)}</strong></td>
                </tr>                <tr>
                    <td>Pro Shop</td>
                    <td>Annual estimate</td>
                    <td class="number">${formatCurrency(results.params.proShopRevenue)}</td>
                </tr>
                <tr>
                    <td>Food & Beverage</td>
                    <td>Annual estimate</td>
                    <td class="number">${formatCurrency(results.params.fbRevenue)}</td>
                </tr>
                <tr>
                    <td>Events</td>
                    <td>${results.params.eventsPerYear} events × ${formatCurrency(results.params.revenuePerEvent)}</td>
                    <td class="number">${formatCurrency(results.eventRevenue)}</td>
                </tr>
            `;
            document.getElementById('revenueTotal').textContent = formatCurrency(results.totalRevenue);
            
            // Expense table
            document.getElementById('expenseDetails').innerHTML = `
                <tr>
                    <td>Land Rental</td>
                    <td>Annual lease</td>
                    <td class="number">${formatCurrency(results.params.landRental)}</td>
                </tr>
                <tr>
                    <td>Court Maintenance</td>
                    <td>${results.params.numCourts} courts × ${formatCurrency(results.params.maintenancePerCourt)}</td>
                    <td class="number">${formatCurrency(results.totalMaintenance)}</td>
                </tr>
                <tr>
                    <td>Manager Salary</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(results.params.managerSalary)}</td>
                </tr>
                <tr>
                    <td>Instructor Salary</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(results.params.instructorSalary)}</td>
                </tr>
                <tr>
                    <td>Reception Staff</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(results.params.receptionSalary)}</td>
                </tr>
                <tr>
                    <td>Maintenance Staff</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(results.params.maintenanceStaffSalary)}</td>
                </tr>
                <tr>
                    <td>Water Cost</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(results.params.waterCost)}</td>
                </tr>
                <tr>
                    <td>Electricity Cost</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(results.params.electricityCost)}</td>
                </tr>
            `;
            document.getElementById('expenseTotal').textContent = formatCurrency(results.totalExpenses);
            
            // P&L table
            let projectionHTML = '';
            let cumulative = 0;
            
            // Calculate annual interest and principal for each year
            const loanBalance = results.adjustedLoanAmount;
            const annualPayment = results.annualDebtService;
            const interestRate = results.params.interestRate;
            
            let remainingBalance = loanBalance;
            
            for (let year = 1; year <= parseInt(document.getElementById('projectPeriod').value); year++) {
                // Calculate interest expense for this year (on remaining balance)
                const interestExpense = remainingBalance * interestRate;
                const principalPayment = Math.min(annualPayment - interestExpense, remainingBalance);
                
                // Net income = Revenue - Operating Expenses - Interest Expense
                const netIncome = results.totalRevenue - results.totalExpenses - interestExpense;
                cumulative += netIncome;
                
                // Update remaining balance
                remainingBalance = Math.max(0, remainingBalance - principalPayment);
                
                projectionHTML += `
                    <tr>
                        <td>Year ${year}</td>
                        <td class="number">${formatCurrency(results.totalRevenue)}</td>
                        <td class="number">${formatCurrency(results.totalExpenses)}</td>
                        <td class="number">${formatCurrency(interestExpense)}</td>
                        <td class="number">${formatCurrency(netIncome)}</td>
                        <td class="number">${formatCurrency(cumulative)}</td>
                    </tr>
                `;
            }
            document.getElementById('projectionDetails').innerHTML = projectionHTML;
            
            // Cash Flow table
            let cashFlowHTML = '';
            let cumulativeCashFlow = 0;
            
            // Reset for cash flow calculations
            remainingBalance = loanBalance;
            
            for (let year = 1; year <= parseInt(document.getElementById('projectPeriod').value); year++) {
                // Calculate interest expense for this year (on remaining balance)
                const interestExpense = remainingBalance * interestRate;
                const principalPayment = Math.min(annualPayment - interestExpense, remainingBalance);
                
                // Net income = Revenue - Operating Expenses - Interest Expense
                const netIncome = results.totalRevenue - results.totalExpenses - interestExpense;
                
                // Cash flow = Net Income + Interest Expense - Total Debt Service
                // (Interest is added back because it's a non-cash expense in this context)
                const netCashFlow = netIncome + interestExpense - annualPayment;
                cumulativeCashFlow += netCashFlow;
                
                // Update remaining balance
                remainingBalance = Math.max(0, remainingBalance - principalPayment);
                
                cashFlowHTML += `
                    <tr>
                        <td>Year ${year}</td>
                        <td class="number">${formatCurrency(netIncome)}</td>
                        <td class="number">${formatCurrency(interestExpense)}</td>
                        <td class="number">${formatCurrency(annualPayment)}</td>
                        <td class="number">${formatCurrency(netCashFlow)}</td>
                        <td class="number">${formatCurrency(cumulativeCashFlow)}</td>
                    </tr>
                `;
            }
            document.getElementById('cashFlowDetails').innerHTML = cashFlowHTML;
            
            // Update current scenario
            document.getElementById('currentOccupancy').textContent = (results.params.occupancyRate * 100).toFixed(0) + '%';
            document.getElementById('currentPrice').textContent = formatCurrency(results.params.hourlyRate);
            document.getElementById('currentProfit').textContent = formatCurrency(results.netProfit);
            document.getElementById('currentROI').textContent = results.roi.toFixed(1) + '% | ' + results.projectIRR.toFixed(1) + '%';
            document.getElementById('currentEquityROI').textContent = results.equityROI.toFixed(1) + '% | ' + results.equityIRR.toFixed(1) + '%';
            document.getElementById('currentPayback').textContent = results.paybackPeriod.toFixed(1) + ' years';
            
            // Update financing report section
            if (document.getElementById('financingDetails')) {
                const financingPercentage = parseFloat(document.getElementById('financingPercentage').value) / 100;
                const interestRate = parseFloat(document.getElementById('interestRate').value) / 100;
                const developmentPeriod = parseInt(document.getElementById('developmentMonths').value);
                
                // Use base investment for loan/equity split calculations
                const baseLoanAmount = results.baseInvestment * financingPercentage;
                const baseEquityAmount = results.baseInvestment * (1 - financingPercentage);
                const monthlyDebtService = calculateLoanPayment(results.adjustedLoanAmount, interestRate, 5);
                
                // Debug: Log values to console
                console.log('Financing Debug:', {
                    baseInvestment: results.baseInvestment,
                    totalInvestment: results.totalInvestment,
                    developmentInterest: results.developmentInterestTotal,
                    baseLoanAmount: baseLoanAmount,
                    baseEquityAmount: baseEquityAmount
                });
                
                // Update the financing table to show correct breakdown
                let financingHTML = `
                    <tr>
                        <td>Bank Loan</td>
                        <td class="number">${formatCurrency(baseLoanAmount)}</td>
                        <td class="number">${(financingPercentage * 100).toFixed(0)}%</td>
                    </tr>
                    <tr>
                        <td>Equity Investment</td>
                        <td class="number">${formatCurrency(baseEquityAmount)}</td>
                        <td class="number">${((1 - financingPercentage) * 100).toFixed(0)}%</td>
                    </tr>
                `;
                
                // Add development interest if capitalized
                if (results.params.developmentInterest === 'capitalized' && results.developmentInterestTotal > 0) {
                    financingHTML += `
                        <tr>
                            <td>Development Interest (Capitalized)</td>
                            <td class="number">${formatCurrency(results.developmentInterestTotal)}</td>
                            <td class="number">-</td>
                        </tr>
                    `;
                }
                
                // Calculate total for display (base + development interest if capitalized)
                const displayTotal = results.params.developmentInterest === 'capitalized' 
                    ? results.totalInvestment + results.developmentInterestTotal
                    : results.totalInvestment;
                
                document.getElementById('financingDetails').innerHTML = financingHTML;
                document.getElementById('reportTotalInvestment').textContent = formatCurrency(displayTotal);
                document.getElementById('reportInterestRate').textContent = (interestRate * 100).toFixed(1) + '%';
                document.getElementById('reportDevelopmentPeriod').textContent = developmentPeriod + ' months';
                document.getElementById('reportDebtService').textContent = formatCurrency(monthlyDebtService);
                
                // Performance metrics
                document.getElementById('reportProjectProfit').textContent = formatCurrency(results.netProfit);
                document.getElementById('reportProjectROI').textContent = results.annualROI.toFixed(1) + '%';
                document.getElementById('reportTotalProjectROI').textContent = results.cumulativeROI.toFixed(1) + '%';
                document.getElementById('reportProjectIRR').textContent = results.projectIRR.toFixed(1) + '%';
                document.getElementById('reportProjectPayback').textContent = results.paybackPeriod.toFixed(1) + ' years';
                
                const annualCashFlowToEquity = results.netProfit - (monthlyDebtService * 12);
                document.getElementById('reportEquityCashFlow').textContent = formatCurrency(annualCashFlowToEquity);
                document.getElementById('reportEquityROI').textContent = results.annualEquityROI.toFixed(1) + '%';
                document.getElementById('reportEquityMultiple').textContent = results.equityMultiple.toFixed(1) + 'x';
                document.getElementById('reportEquityIRR').textContent = results.equityIRR.toFixed(1) + '%';
                document.getElementById('reportEquityPayback').textContent = results.equityPaybackPeriod.toFixed(1) + ' years';
            }
        }

        // Calculate scenario
        function calculateScenario(occupancy, price) {
            const numCourts = parseInt(document.getElementById('numCourts').value);
            const costPerCourt = parseFloat(document.getElementById('costPerCourt').value);
            const infrastructureCost = parseFloat(document.getElementById('infrastructureCost').value);
            const hoursPerDay = parseInt(document.getElementById('hoursPerDay').value);
            const daysPerYear = parseInt(document.getElementById('daysPerYear').value);
            const landRental = parseFloat(document.getElementById('landRental').value);
            const maintenancePerCourt = parseFloat(document.getElementById('maintenancePerCourt').value);
            const totalSalaries = parseFloat(document.getElementById('managerSalary').value) + 
                                parseFloat(document.getElementById('instructorSalary').value) + 
                                parseFloat(document.getElementById('receptionSalary').value) + 
                                parseFloat(document.getElementById('maintenanceStaffSalary').value);
            const additionalRevenue = parseFloat(document.getElementById('proShopRevenue').value) + 
                                    parseFloat(document.getElementById('fbRevenue').value);
            
            const additionalFacilities = parseFloat(document.getElementById('additionalFacilities').value);
            const totalInvestment = (numCourts * costPerCourt) + infrastructureCost + additionalFacilities;
            const grossCourtRevenue = numCourts * price * hoursPerDay * daysPerYear * (occupancy / 100);
            const vatRate = parseFloat(document.getElementById("vatRate").value) || 5;
            const playtomicRate = parseFloat(document.getElementById("playtomicCommission").value) || 4;
            const vatAmount = grossCourtRevenue * (vatRate / (100 + vatRate));
            const playtomicAmount = grossCourtRevenue * (playtomicRate / 100);
            const courtRevenue = grossCourtRevenue - vatAmount - playtomicAmount;
            const totalRevenue = courtRevenue + additionalRevenue;
            // Scale utilities with number of courts (60% fixed, 40% per court)
            const baseWaterCost = parseFloat(document.getElementById('waterCost').value);
            const baseElectricityCost = parseFloat(document.getElementById('electricityCost').value);
            const baseNumCourts = 8; // Default courts for baseline costs
            
            const waterCost = baseWaterCost * (0.6 + 0.4 * (numCourts / baseNumCourts));
            const electricityCost = baseElectricityCost * (0.6 + 0.4 * (numCourts / baseNumCourts));
            const totalExpenses = landRental + (numCourts * maintenancePerCourt) + totalSalaries + waterCost + electricityCost;
            const netProfit = totalRevenue - totalExpenses;
            const roi = (netProfit / totalInvestment) * 100;
            const paybackPeriod = netProfit > 0 ? totalInvestment / netProfit : 999;
            
            return { netProfit, roi, paybackPeriod };
        }

        // Update scenarios
        function updateScenarios() {
            const conservative = calculateScenario(40, 24);
            if (document.getElementById('conservativeROI')) {
                document.getElementById('conservativeROI').textContent = conservative.roi.toFixed(1) + '%';
            }
            
            const base = calculateScenario(50, 28);
            if (document.getElementById('baseCaseROI')) {
                document.getElementById('baseCaseROI').textContent = base.roi.toFixed(1) + '%';
            }
            
            const optimistic = calculateScenario(70, 32);
            if (document.getElementById('optimisticROI')) {
                document.getElementById('optimisticROI').textContent = optimistic.roi.toFixed(1) + '%';
            }
        }

        // Update Bank Presentation
        function updateBankPresentation(results) {
            if (!results) return;
            
            // Update hero metrics with animations
            updateHeroMetric('heroTotalInvestment', formatCurrency(results.totalInvestment));
            updateHeroMetric('heroFinancingRequest', formatCurrency(results.loanAmount));
            updateHeroMetric('heroProjectedROI', results.equityROI.toFixed(1) + '%');
            updateHeroMetric('heroPaybackPeriod', results.paybackPeriod.toFixed(1) + ' years');
            
            // Update financial performance section
            if (document.getElementById('perfAnnualRevenue')) {
                document.getElementById('perfAnnualRevenue').textContent = formatCurrency(results.totalRevenue);
            }
            if (document.getElementById('perfProjectROI')) {
                document.getElementById('perfProjectROI').textContent = results.roi.toFixed(1) + '%';
            }
            if (document.getElementById('perfEquityROI')) {
                document.getElementById('perfEquityROI').textContent = results.equityROI.toFixed(1) + '%';
            }
            if (document.getElementById('perfProjectIRR')) {
                document.getElementById('perfProjectIRR').textContent = results.projectIRR.toFixed(1) + '%';
            }
            if (document.getElementById('perfEquityIRR')) {
                document.getElementById('perfEquityIRR').textContent = results.equityIRR.toFixed(1) + '%';
            }
            
            // Update financing structure legend
            if (document.getElementById('finDebtAmount')) {
                document.getElementById('finDebtAmount').textContent = formatCurrency(results.loanAmount) + ` (${results.ltvRatio.toFixed(0)}%)`;
            }
            if (document.getElementById('finEquityAmount')) {
                document.getElementById('finEquityAmount').textContent = formatCurrency(results.equityInvestment) + ` (${(100 - results.ltvRatio).toFixed(0)}%)`;
            }
            if (document.getElementById('finTotalInvest')) {
                document.getElementById('finTotalInvest').textContent = formatCurrency(results.totalInvestment);
            }
            if (document.getElementById('finLtvValue')) {
                document.getElementById('finLtvValue').textContent = results.ltvRatio.toFixed(1) + '%';
            }
            if (document.getElementById('finDscrValue')) {
                document.getElementById('finDscrValue').textContent = results.dscr.toFixed(2) + 'x';
            }
            if (document.getElementById('finDebtService')) {
                document.getElementById('finDebtService').textContent = formatCurrency(results.annualDebtService);
            }
            
            // Update ROI bars
            updateROIBars(results);
            
            // Update charts if they exist
            updateBankPresentationCharts(results);
        }
        
        // Update ROI bars with animation
        function updateROIBars(results) {
            if (!results) return;
            
            // Update Project ROI bar
            const projectROIBar = document.getElementById('projectROIBar');
            if (projectROIBar) {
                const projectROIPercent = Math.min(results.roi, 200); // Cap at 200% for visual purposes
                projectROIBar.style.width = (projectROIPercent / 200 * 100) + '%';
                projectROIBar.style.background = 'linear-gradient(90deg, #3b82f6, #1d4ed8)';
                projectROIBar.style.transition = 'width 0.5s ease';
            }
            
            // Update Equity ROI bar
            const equityROIBar = document.getElementById('equityROIBar');
            if (equityROIBar) {
                const equityROIPercent = Math.min(results.equityROI, 200); // Cap at 200% for visual purposes
                equityROIBar.style.width = (equityROIPercent / 200 * 100) + '%';
                equityROIBar.style.background = 'linear-gradient(90deg, #10b981, #059669)';
                equityROIBar.style.transition = 'width 0.5s ease';
            }
            
            // Update Project IRR bar
            const projectIRRBar = document.getElementById('projectIRRBar');
            if (projectIRRBar) {
                const projectIRRPercent = Math.min(results.projectIRR, 200); // Cap at 200% for visual purposes
                projectIRRBar.style.width = (projectIRRPercent / 200 * 100) + '%';
                projectIRRBar.style.background = 'linear-gradient(90deg, #8b5cf6, #7c3aed)';
                projectIRRBar.style.transition = 'width 0.5s ease';
            }
            
            // Update Equity IRR bar
            const equityIRRBar = document.getElementById('equityIRRBar');
            if (equityIRRBar) {
                const equityIRRPercent = Math.min(results.equityIRR, 200); // Cap at 200% for visual purposes
                equityIRRBar.style.width = (equityIRRPercent / 200 * 100) + '%';
                equityIRRBar.style.background = 'linear-gradient(90deg, #f59e0b, #d97706)';
                equityIRRBar.style.transition = 'width 0.5s ease';
            }
        }
        
        // Animated counter update for hero metrics
        function updateHeroMetric(elementId, newValue) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            const currentValue = element.textContent;
            if (currentValue !== newValue) {
                element.style.opacity = '0.7';
                element.style.transform = 'scale(0.95)';
                
                setTimeout(() => {
                    element.textContent = newValue;
                    element.style.opacity = '1';
                    element.style.transform = 'scale(1)';
                }, 150);
            }
        }
        
        // Update charts in bank presentation
        function updateBankPresentationCharts(results) {
            // Update revenue projection chart if canvas exists
            const revenueCanvas = document.getElementById('revenueChart');
            if (revenueCanvas && revenueCanvas.offsetParent !== null) {
                try {
                    drawRevenueChart(revenueCanvas, results);
                } catch (error) {
                    console.warn('Error drawing revenue chart:', error);
                }
            }
            
            // Update financing pie chart if canvas exists
            const financingCanvas = document.getElementById('financingCanvas');
            if (financingCanvas && financingCanvas.offsetParent !== null) {
                try {
                    drawFinancingChart(financingCanvas, results);
                } catch (error) {
                    console.warn('Error drawing financing chart:', error);
                }
            }
        }
        
        // Draw revenue projection chart
        function drawRevenueChart(canvas, results) {
            if (!canvas || !results) return;
            
            const ctx = canvas.getContext('2d');
            if (!ctx) return;
            
            // Make canvas responsive
            const rect = canvas.getBoundingClientRect();
            if (rect.width === 0 || rect.height === 0) return;
            
            const dpr = window.devicePixelRatio || 1;
            
            // Set actual canvas size
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            
            // Scale the drawing context
            ctx.scale(dpr, dpr);
            
            const width = rect.width;
            const height = rect.height;
            
            // Clear canvas
            ctx.clearRect(0, 0, width, height);
            
            // Sample 5-year revenue data
            const years = ['Year 1', 'Year 2', 'Year 3', 'Year 4', 'Year 5'];
            const revenues = [
                results.totalRevenue,
                results.totalRevenue * 1.05,
                results.totalRevenue * 1.1,
                results.totalRevenue * 1.15,
                results.totalRevenue * 1.2
            ];
            
            // Chart dimensions - responsive
            const margin = Math.min(width * 0.1, 40);
            const chartWidth = width - (margin * 2);
            const chartHeight = height - (margin * 1.5);
            const startX = margin;
            const startY = height - margin;
            
            // Find max value for scaling
            const maxRevenue = Math.max(...revenues);
            
            // Draw bars - responsive sizing
            const barSpacing = Math.min(chartWidth / years.length * 0.2, 20);
            const barWidth = (chartWidth - barSpacing * (years.length - 1)) / years.length;
            
            revenues.forEach((revenue, index) => {
                const barHeight = (revenue / maxRevenue) * chartHeight;
                const x = startX + index * (barWidth + barSpacing);
                const y = startY - barHeight;
                
                // Gradient for bars
                const gradient = ctx.createLinearGradient(0, y, 0, startY);
                gradient.addColorStop(0, '#6366f1');
                gradient.addColorStop(1, '#4f46e5');
                ctx.fillStyle = gradient;
                
                ctx.fillRect(x, y, barWidth, barHeight);
                
                // Value labels - responsive font size
                const fontSize = Math.max(width * 0.03, 10);
                ctx.fillStyle = '#374151';
                ctx.font = `${fontSize}px Inter, system-ui, sans-serif`;
                ctx.textAlign = 'center';
                ctx.fillText(formatCurrency(revenue).replace('€', '€').replace(',000', 'k'), x + barWidth/2, y - 5);
                
                // Year labels
                ctx.fillText(years[index], x + barWidth/2, startY + 15);
            });
        }
        
        // Draw financing structure pie chart
        function drawFinancingChart(canvas, results) {
            if (!canvas || !results) return;
            
            const ctx = canvas.getContext('2d');
            if (!ctx) return;
            
            // Make canvas responsive
            const rect = canvas.getBoundingClientRect();
            if (rect.width === 0 || rect.height === 0) return;
            
            const dpr = window.devicePixelRatio || 1;
            
            // Set actual canvas size
            canvas.width = rect.width * dpr;
            canvas.height = rect.height * dpr;
            
            // Scale the drawing context
            ctx.scale(dpr, dpr);
            
            const width = rect.width;
            const height = rect.height;
            const centerX = width / 2;
            const centerY = height / 2;
            const radius = Math.min(width, height) / 2 - 20;
            
            // Clear canvas
            ctx.clearRect(0, 0, width, height);
            
            // Data
            const equity = results.equityInvestment;
            const loan = results.loanAmount;
            const total = equity + loan;
            
            // Calculate angles
            const equityAngle = (equity / total) * 2 * Math.PI;
            const loanAngle = (loan / total) * 2 * Math.PI;
            
            // Draw equity slice
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, 0, equityAngle);
            ctx.closePath();
            ctx.fillStyle = '#10b981';
            ctx.fill();
            
            // Draw loan slice
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, equityAngle, equityAngle + loanAngle);
            ctx.closePath();
            ctx.fillStyle = '#3b82f6';
            ctx.fill();
            
            // Add labels - responsive font size
            const fontSize = Math.max(width * 0.08, 10);
            ctx.fillStyle = '#fff';
            ctx.font = `bold ${fontSize}px Inter, system-ui, sans-serif`;
            ctx.textAlign = 'center';
            
            // Only show labels if radius is large enough
            if (radius > 60) {
                // Equity label
                const equityLabelAngle = equityAngle / 2;
                const equityLabelX = centerX + Math.cos(equityLabelAngle) * radius * 0.7;
                const equityLabelY = centerY + Math.sin(equityLabelAngle) * radius * 0.7;
                ctx.fillText('Equity', equityLabelX, equityLabelY - fontSize * 0.5);
                ctx.font = `${fontSize * 0.8}px Inter, system-ui, sans-serif`;
                ctx.fillText(formatCurrency(equity).replace(',000', 'k'), equityLabelX, equityLabelY + fontSize * 0.5);
                
                // Loan label
                ctx.font = `bold ${fontSize}px Inter, system-ui, sans-serif`;
                const loanLabelAngle = equityAngle + loanAngle / 2;
                const loanLabelX = centerX + Math.cos(loanLabelAngle) * radius * 0.7;
                const loanLabelY = centerY + Math.sin(loanLabelAngle) * radius * 0.7;
                ctx.fillText('Bank Loan', loanLabelX, loanLabelY - fontSize * 0.5);
                ctx.font = `${fontSize * 0.8}px Inter, system-ui, sans-serif`;
                ctx.fillText(formatCurrency(loan).replace(',000', 'k'), loanLabelX, loanLabelY + fontSize * 0.5);
            }
        }

        // Initialize inputs
        function initializeInputs() {
            // Add event listeners to all inputs
            document.querySelectorAll('input').forEach(input => {
                if (input.classList.contains('amount-input')) {
                    // Handle amount inputs (text inputs with formatting)
                    input.addEventListener('input', (e) => {
                        // Allow only numbers and commas during typing
                        let value = e.target.value.replace(/[^0-9,]/g, '');
                        
                        // Remove existing commas and reformat
                        const numericValue = value.replace(/,/g, '');
                        if (numericValue && !isNaN(numericValue)) {
                            e.target.value = formatNumberInput(numericValue);
                        }
                        
                        updateAll();
                    });
                    
                    input.addEventListener('focus', () => {
                        // Remove commas for easier editing
                        const currentValue = input.value || '';
                        input.value = unformatNumberInput(currentValue);
                    });
                    
                    input.addEventListener('blur', () => {
                        // Add commas back when done editing
                        const value = unformatNumberInput(input.value || '');
                        if (value && !isNaN(parseFloat(value))) {
                            input.value = formatNumberInput(value);
                        }
                    });
                } else {
                    // Handle other inputs (number, range)
                    input.addEventListener('input', () => {
                        updateRangeDisplays();
                        updateAll();
                    });
                }
            });
            
            // Initialize range displays
            updateRangeDisplays();
        }

        // Update range displays
        function updateRangeDisplays() {
            document.querySelectorAll('.range-container').forEach(container => {
                const input = container.querySelector('input[type="range"]');
                const display = container.querySelector('.range-value');
                if (input && display) {
                    let value = input.value;
                    if (input.id === 'hourlyRate') {
                        display.textContent = '€' + value;
                    } else if (input.id === 'occupancyRate') {
                        display.textContent = value + '%';
                    } else if (input.id === 'financingPercentage') {
                        display.textContent = value + '%';
                    } else if (input.id === 'developmentMonths') {
                        display.textContent = value + ' months';
                    } else if (input.id === 'projectPeriod') {
                        display.textContent = value + ' years';
                    } else if (input.id === 'hoursPerDay') {
                        display.textContent = value + 'h';
                    } else {
                        display.textContent = value;
                    }
                }
            });
        }

        // Save settings
        function saveSettings() {
            const settings = {
                numCourts: document.getElementById('numCourts').value,
                costPerCourt: unformatNumberInput(document.getElementById('costPerCourt').value),
                infrastructureCost: unformatNumberInput(document.getElementById('infrastructureCost').value),
                additionalFacilities: unformatNumberInput(document.getElementById('additionalFacilities').value),
                hourlyRate: document.getElementById('hourlyRate').value,
                occupancyRate: document.getElementById('occupancyRate').value,
                hoursPerDay: document.getElementById('hoursPerDay').value,
                daysPerYear: document.getElementById('daysPerYear').value,
                landRental: unformatNumberInput(document.getElementById('landRental').value),
                maintenancePerCourt: unformatNumberInput(document.getElementById('maintenancePerCourt').value),
                managerSalary: unformatNumberInput(document.getElementById('managerSalary').value),
                instructorSalary: unformatNumberInput(document.getElementById('instructorSalary').value),
                receptionSalary: unformatNumberInput(document.getElementById('receptionSalary').value),
                maintenanceStaffSalary: unformatNumberInput(document.getElementById('maintenanceStaffSalary').value),
                proShopRevenue: unformatNumberInput(document.getElementById('proShopRevenue').value),
                fbRevenue: unformatNumberInput(document.getElementById('fbRevenue').value),
                eventsPerYear: document.getElementById('eventsPerYear').value,
                revenuePerEvent: unformatNumberInput(document.getElementById('revenuePerEvent').value),
                waterCost: unformatNumberInput(document.getElementById('waterCost').value),
                electricityCost: unformatNumberInput(document.getElementById('electricityCost').value)
            };
            
            localStorage.setItem('padelModelSettings', JSON.stringify(settings));
            showToast('Settings saved successfully!');
        }

        // Auto-save
        function autoSave() {
            clearTimeout(autoSaveTimer);
            autoSaveTimer = setTimeout(() => {
                const settings = {
                    numCourts: document.getElementById('numCourts').value,
                    costPerCourt: unformatNumberInput(document.getElementById('costPerCourt').value),
                    infrastructureCost: unformatNumberInput(document.getElementById('infrastructureCost').value),
                    additionalFacilities: unformatNumberInput(document.getElementById('additionalFacilities').value),
                    hourlyRate: document.getElementById('hourlyRate').value,
                    occupancyRate: document.getElementById('occupancyRate').value,
                    hoursPerDay: document.getElementById('hoursPerDay').value,
                    daysPerYear: document.getElementById('daysPerYear').value,
                    landRental: unformatNumberInput(document.getElementById('landRental').value),
                    maintenancePerCourt: unformatNumberInput(document.getElementById('maintenancePerCourt').value),
                    managerSalary: unformatNumberInput(document.getElementById('managerSalary').value),
                    instructorSalary: unformatNumberInput(document.getElementById('instructorSalary').value),
                    receptionSalary: unformatNumberInput(document.getElementById('receptionSalary').value),
                    maintenanceStaffSalary: unformatNumberInput(document.getElementById('maintenanceStaffSalary').value),
                    proShopRevenue: unformatNumberInput(document.getElementById('proShopRevenue').value),
                    fbRevenue: unformatNumberInput(document.getElementById('fbRevenue').value),
                    eventsPerYear: document.getElementById('eventsPerYear').value,
                    revenuePerEvent: unformatNumberInput(document.getElementById('revenuePerEvent').value)
                };
                localStorage.setItem('padelModelSettings', JSON.stringify(settings));
            }, 1000);
        }

        // Load settings
        function loadSettings(silent = false) {
            const saved = localStorage.getItem('padelModelSettings');
            if (saved) {
                const settings = JSON.parse(saved);
                Object.keys(settings).forEach(key => {
                    const element = document.getElementById(key);
                    if (element) {
                        if (element.classList.contains('amount-input')) {
                            // Format amount inputs
                            element.value = formatNumberInput(settings[key]);
                        } else {
                            element.value = settings[key];
                        }
                    }
                });
                updateRangeDisplays();
                updateAll();
                if (!silent) {
                    showToast('Settings loaded successfully!');
                }
            } else if (!silent) {
                showToast('No saved settings found', 'error');
            }
        }

        // Reset settings
        function resetSettings() {
            const defaults = {
                numCourts: 8,
                costPerCourt: 35000,
                infrastructureCost: 100000,
                additionalFacilities: 100000,
                hourlyRate: 28,
                occupancyRate: 50,
                hoursPerDay: 12,
                daysPerYear: 360,
                landRental: 120000,
                maintenancePerCourt: 2200,
                waterCost: 8000,
                electricityCost: 15000,
                managerSalary: 42000,
                instructorSalary: 19800,
                receptionSalary: 14400,
                maintenanceStaffSalary: 16800,
                proShopRevenue: 15000,
                fbRevenue: 20000,
                eventsPerYear: 6,
                revenuePerEvent: 2000,
                vatRate: 5,
                playtomicCommission: 4
            };
            
            Object.keys(defaults).forEach(key => {
                const element = document.getElementById(key);
                if (element) {
                    if (element.classList.contains('amount-input')) {
                        // Format amount inputs
                        element.value = formatNumberInput(defaults[key]);
                    } else {
                        element.value = defaults[key];
                    }
                }
            });
            
            updateRangeDisplays();
            updateAll();
            showToast('Reset to default values');
        }

        // Export data
        function exportData() {
            const results = calculateModel();
            const data = {
                timestamp: new Date().toISOString(),
                parameters: results.params,
                results: {
                    totalInvestment: results.totalInvestment,
                    totalRevenue: results.totalRevenue,
                    totalExpenses: results.totalExpenses,
                    netProfit: results.netProfit,
                    roi: results.roi,
                    paybackPeriod: results.paybackPeriod,
                    breakEvenOccupancy: results.breakEvenOccupancy,
                    fiveYearProfit: results.fiveYearProfit
                }
            };
            
            const dataStr = JSON.stringify(data, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            const exportFileDefaultName = 'padel_model_' + new Date().toISOString().slice(0,10) + '.json';
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            showToast('Data exported successfully!');
        }

        // Load scenario
        function loadScenario(type) {
            const scenarios = {
                basic: { 
                    occupancyRate: 47, 
                    hourlyRate: 33, 
                    additionalFacilities: 0,
                    fbRevenue: 5000,
                    proShopRevenue: 10000
                },
                premium: { 
                    occupancyRate: 60, 
                    hourlyRate: 37, 
                    additionalFacilities: 200000,
                    fbRevenue: 20000,
                    proShopRevenue: 25000
                }
            };
            
            if (scenarios[type]) {
                const scenario = scenarios[type];
                document.getElementById('occupancyRate').value = scenario.occupancyRate;
                document.getElementById('hourlyRate').value = scenario.hourlyRate;
                document.getElementById('additionalFacilities').value = formatNumberInput(scenario.additionalFacilities);
                document.getElementById('fbRevenue').value = formatNumberInput(scenario.fbRevenue);
                document.getElementById('proShopRevenue').value = formatNumberInput(scenario.proShopRevenue);
                
                updateRangeDisplays();
                updateAll();
                // Format number inputs after a short delay to allow DOM to update
                setTimeout(formatAllNumberInputs, 100);
                
                // Update active scenario card
                document.querySelectorAll('.scenario-card').forEach(card => card.classList.remove('active'));
                event.currentTarget.classList.add('active');
                
                showToast(`Loaded ${type} scenario`);
            }
        }

        // Generate Sensitivity Tables
        function generateSensitivityTables() {
            console.log('=== Starting to generate sensitivity tables ===');
            
            // Check if required input elements exist
            const requiredInputs = ['numCourts', 'costPerCourt', 'hourlyRate', 'occupancyRate'];
            console.log('Checking for required inputs:', requiredInputs);
            
            const missingInputs = requiredInputs.filter(id => {
                const element = document.getElementById(id);
                console.log(`Element '${id}':`, element ? `found (value: ${element.value})` : 'NOT FOUND');
                return !element;
            });
            
            if (missingInputs.length > 0) {
                console.error('Missing input elements:', missingInputs);
                console.log('Will retry in 1 second...');
                setTimeout(() => generateSensitivityTables(), 1000);
                return;
            }
            
            try {
                console.log('Generating occupancy-price table...');
                generateOccupancyPriceTable();
                
                console.log('Generating price-occupancy table...');
                generatePriceOccupancyTable();
                
                console.log('Generating courts-ROI table...');
                generateCourtsRoiTable();
                
                console.log('Generating investment-profit table...');
                generateInvestmentProfitTable();
                
                console.log('Generating ancillary revenue table...');
                generateAncillaryRevenueTable();
                
                console.log('Generating financing ROI table...');
                generateFinancingROITable();
                
                console.log('Generating financing IRR table...');
                generateFinancingIRRTable();
                
                console.log('Updating sensitivity highlights...');
                updateSensitivityHighlights();
                
                console.log('=== All sensitivity tables generated successfully ===');
            } catch (error) {
                console.error('Error generating sensitivity tables:', error);
                console.error('Error stack:', error.stack);
            }
        }
        
        // Function to force regenerate tables (useful for parameter changes)
        function regenerateSensitivityTables() {
            generateSensitivityTables();
        }

        // Update Report with current parameters
        function updateReport() {
            console.log('Updating report with current parameters...');
            
            try {
                const results = calculateModel();
                if (!results) {
                    console.error('No calculation results available');
                    return;
                }
                
                // Update Investment Breakdown
                updateInvestmentBreakdown(results);
                
                // Update Revenue Streams
                updateRevenueStreams(results);
                
                // Update Operating Expenses
                updateOperatingExpenses(results);
                
                // Update 5-Year Projections
                update5YearProjections(results);
                
                console.log('Report updated successfully');
            } catch (error) {
                console.error('Error updating report:', error);
            }
        }

        function updateInvestmentBreakdown(results) {
            const tbody = document.getElementById('investmentDetails');
            if (!tbody) return;
            
            const numCourts = parseInt(document.getElementById('numCourts').value);
            const costPerCourt = parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value));
            const infrastructureCost = parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value));
            const additionalFacilities = parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value));
            
            tbody.innerHTML = `
                <tr>
                    <td>Padel Courts</td>
                    <td>${numCourts}</td>
                    <td class="number">${formatCurrency(costPerCourt)}</td>
                    <td class="number">${formatCurrency(numCourts * costPerCourt)}</td>
                </tr>
                <tr>
                    <td>Infrastructure</td>
                    <td>1</td>
                    <td class="number">${formatCurrency(infrastructureCost)}</td>
                    <td class="number">${formatCurrency(infrastructureCost)}</td>
                </tr>
                <tr>
                    <td>Additional Facilities</td>
                    <td>1</td>
                    <td class="number">${formatCurrency(additionalFacilities)}</td>
                    <td class="number">${formatCurrency(additionalFacilities)}</td>
                </tr>
            `;
            
            document.getElementById('investmentTotal').textContent = formatCurrency(results.totalInvestment);
        }

        function updateRevenueStreams(results) {
            const tbody = document.getElementById('revenueDetails');
            if (!tbody) return;
            
            const numCourts = parseInt(document.getElementById('numCourts').value);
            const hourlyRate = parseFloat(document.getElementById('hourlyRate').value);
            const occupancyRate = parseFloat(document.getElementById('occupancyRate').value);
            const hoursPerDay = parseInt(document.getElementById('hoursPerDay').value);
            const daysPerYear = parseInt(unformatNumberInput(document.getElementById('daysPerYear').value));
            const proShopRevenue = parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value));
            const fbRevenue = parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value));
            const eventsPerYear = parseInt(unformatNumberInput(document.getElementById('eventsPerYear').value));
            const revenuePerEvent = parseFloat(unformatNumberInput(document.getElementById('revenuePerEvent').value));
            
            const courtRevenue = numCourts * hourlyRate * hoursPerDay * daysPerYear * (occupancyRate / 100);
            const eventsRevenue = eventsPerYear * revenuePerEvent;
            
            tbody.innerHTML = `
                <tr>
                    <td><strong>Gross Court Bookings</strong></td>
                    <td>${numCourts} courts × €${hourlyRate}/hr × ${hoursPerDay}hrs × ${daysPerYear} days × ${occupancyRate}%</td>
                    <td class="number">${formatCurrency(courtRevenue)}</td>
                </tr>
                <tr>
                    <td>Pro Shop</td>
                    <td>Annual estimate</td>
                    <td class="number">${formatCurrency(proShopRevenue)}</td>
                </tr>
                <tr>
                    <td>Food & Beverage</td>
                    <td>Annual estimate</td>
                    <td class="number">${formatCurrency(fbRevenue)}</td>
                </tr>
                <tr>
                    <td>Events</td>
                    <td>${eventsPerYear} events × ${formatCurrency(revenuePerEvent)}</td>
                    <td class="number">${formatCurrency(eventsRevenue)}</td>
                </tr>
            `;
            
            document.getElementById('revenueTotal').textContent = formatCurrency(results.totalRevenue);
        }

        function updateOperatingExpenses(results) {
            const tbody = document.getElementById('expenseDetails');
            if (!tbody) return;
            
            const numCourts = parseInt(document.getElementById('numCourts').value);
            const landRental = parseFloat(unformatNumberInput(document.getElementById('landRental').value));
            const maintenancePerCourt = parseFloat(unformatNumberInput(document.getElementById('maintenancePerCourt').value));
            const managerSalary = parseFloat(unformatNumberInput(document.getElementById('managerSalary').value));
            const instructorSalary = parseFloat(unformatNumberInput(document.getElementById('instructorSalary').value));
            const receptionSalary = parseFloat(unformatNumberInput(document.getElementById('receptionSalary').value));
            const maintenanceStaffSalary = parseFloat(unformatNumberInput(document.getElementById('maintenanceStaffSalary').value));
            const waterCost = parseFloat(unformatNumberInput(document.getElementById('waterCost').value));
            const electricityCost = parseFloat(unformatNumberInput(document.getElementById('electricityCost').value));
            
            tbody.innerHTML = `
                <tr>
                    <td>Land Rental</td>
                    <td>Annual lease</td>
                    <td class="number">${formatCurrency(landRental)}</td>
                </tr>
                <tr>
                    <td>Court Maintenance</td>
                    <td>${numCourts} courts × ${formatCurrency(maintenancePerCourt)}</td>
                    <td class="number">${formatCurrency(numCourts * maintenancePerCourt)}</td>
                </tr>
                <tr>
                    <td>Manager Salary</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(managerSalary)}</td>
                </tr>
                <tr>
                    <td>Instructor Salary</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(instructorSalary)}</td>
                </tr>
                <tr>
                    <td>Reception Staff</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(receptionSalary)}</td>
                </tr>
                <tr>
                    <td>Maintenance Staff</td>
                    <td>Annual</td>
                    <td class="number">${formatCurrency(maintenanceStaffSalary)}</td>
                </tr>
                <tr>
                    <td>Water</td>
                    <td>Annual estimate</td>
                    <td class="number">${formatCurrency(waterCost)}</td>
                </tr>
                <tr>
                    <td>Electricity</td>
                    <td>Annual estimate</td>
                    <td class="number">${formatCurrency(electricityCost)}</td>
                </tr>
            `;
            
            document.getElementById('expenseTotal').textContent = formatCurrency(results.totalExpenses);
        }

        function update5YearProjections(results) {
            const tbody = document.getElementById('projectionDetails');
            if (!tbody) return;
            
            const projectPeriod = parseInt(document.getElementById('projectPeriod').value);
            const loanAmount = results.totalInvestment * 0.6; // 60% loan
            const interestRate = parseFloat(document.getElementById('interestRate').value) / 100;
            const monthlyRate = interestRate / 12;
            const loanTerm = parseInt(document.getElementById('loanTerm').value) * 12; // months
            
            // Calculate monthly payment
            const monthlyPayment = (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, loanTerm)) / 
                                  (Math.pow(1 + monthlyRate, loanTerm) - 1);
            const annualDebtService = monthlyPayment * 12;
            
            let cumulativeProfit = 0;
            let projectionHTML = '';
            
            for (let year = 1; year <= projectPeriod; year++) {
                const netIncome = results.netProfit - annualDebtService;
                cumulativeProfit += netIncome;
                
                projectionHTML += `
                    <tr>
                        <td>Year ${year}</td>
                        <td class="number">${formatCurrency(results.totalRevenue)}</td>
                        <td class="number">${formatCurrency(results.totalExpenses)}</td>
                        <td class="number">${formatCurrency(annualDebtService)}</td>
                        <td class="number">${formatCurrency(netIncome)}</td>
                        <td class="number">${formatCurrency(cumulativeProfit)}</td>
                    </tr>
                `;
            }
            
            tbody.innerHTML = projectionHTML;
        }

        // Make all functions globally available
        window.generateSensitivityTables = generateSensitivityTables;
        window.updateReport = updateReport;


        function generateOccupancyPriceTable() {
            console.log('Generating Occupancy-Price table...');
            const occupancyRates = [30, 40, 50, 60, 70, 80];
            const hourlyRates = [20, 24, 28, 32, 36, 40];
            const tbody = document.getElementById('occupancyPriceBody');
            
            if (!tbody) {
                console.error('occupancyPriceBody element not found!');
                return;
            }
            
            tbody.innerHTML = '';
            
            occupancyRates.forEach(occupancy => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = occupancy + '%';
                row.appendChild(headerCell);
                
                // Data cells
                hourlyRates.forEach(rate => {
                    const cell = document.createElement('td');
                    
                    try {
                        // Calculate profit for this combination
                        const profit = calculateProfitForParams({
                            occupancyRate: occupancy,
                            hourlyRate: rate
                        });
                        
                        console.log(`Profit for ${occupancy}% occupancy and €${rate}/hour: €${profit}`);
                        
                        if (profit !== null && !isNaN(profit)) {
                            cell.textContent = formatCurrency(profit);
                            cell.className = getProfitColorClass(profit);
                        } else {
                            cell.textContent = 'N/A';
                            console.error(`Invalid profit calculation result: ${profit}`);
                        }
                        
                        cell.dataset.occupancy = occupancy;
                        cell.dataset.rate = rate;
                        
                        // Add click handler
                        cell.addEventListener('click', () => {
                            applySensitivityParams(occupancy, rate);
                        });
                        
                    } catch (error) {
                        console.error(`Error calculating profit for ${occupancy}%/${rate}€:`, error);
                        cell.textContent = 'Error';
                    }
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function generatePriceOccupancyTable() {
            const hourlyRates = [28, 32, 36, 40, 44];
            const occupancyRates = [30, 40, 50, 60, 70];
            const tbody = document.getElementById('priceOccupancyBody');
            
            tbody.innerHTML = '';
            
            hourlyRates.forEach(rate => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = '€' + rate;
                row.appendChild(headerCell);
                
                // Data cells
                occupancyRates.forEach(occupancy => {
                    const cell = document.createElement('td');
                    
                    // Calculate payback period for this combination
                    const payback = calculatePaybackForParams({
                        hourlyRate: rate,
                        occupancyRate: occupancy
                    });
                    
                    cell.textContent = payback.toFixed(1) + 'y';
                    cell.className = getPaybackColorClass(payback);
                    cell.dataset.rate = rate;
                    cell.dataset.occupancy = occupancy;
                    
                    // Add click handler
                    cell.addEventListener('click', () => {
                        applyPriceParams(rate, occupancy);
                    });
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function generateCourtsRoiTable() {
            const courtCounts = [4, 6, 8, 10, 12];
            const hourlyRates = [28, 32, 36, 40, 44];
            const tbody = document.getElementById('courtsRoiBody');
            
            tbody.innerHTML = '';
            
            courtCounts.forEach(courts => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = courts + ' Courts';
                row.appendChild(headerCell);
                
                // Data cells
                hourlyRates.forEach(rate => {
                    const cell = document.createElement('td');
                    
                    // Calculate payback period for this combination
                    const payback = calculatePaybackForParams({
                        numCourts: courts,
                        hourlyRate: rate
                    });
                    
                    cell.textContent = payback > 50 ? '50+' : payback.toFixed(1) + ' yrs';
                    cell.className = getPaybackColorClass(payback);
                    cell.dataset.courts = courts;
                    cell.dataset.rate = rate;
                    
                    // Add click handler
                    cell.addEventListener('click', () => {
                        applyCourtsRateParams(courts, rate);
                    });
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function generateInvestmentProfitTable() {
            const investments = [
                { label: 'Basic (€380k)', value: 380000, additionalFacilities: 0, rate: 32 },
                { label: 'Enhanced (€480k)', value: 480000, additionalFacilities: 100000, rate: 34 },
                { label: 'Premium (€580k)', value: 580000, additionalFacilities: 200000, rate: 36 }
            ];
            const occupancyRates = [40, 50, 60, 70];
            const tbody = document.getElementById('investmentProfitBody');
            
            tbody.innerHTML = '';
            
            investments.forEach(investment => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = investment.label;
                row.appendChild(headerCell);
                
                // Data cells
                occupancyRates.forEach(occupancy => {
                    const cell = document.createElement('td');
                    
                    // Calculate profit for this combination
                    const profit = calculateProfitForParams({
                        occupancyRate: occupancy,
                        hourlyRate: investment.rate,
                        additionalFacilities: investment.additionalFacilities
                    });
                    
                    cell.textContent = formatCurrency(profit);
                    cell.className = getInvestmentProfitColorClass(profit);
                    cell.dataset.investment = investment.value;
                    cell.dataset.occupancy = occupancy;
                    
                    // Add click handler
                    cell.addEventListener('click', () => {
                        applyInvestmentParams(investment.additionalFacilities, investment.rate, occupancy);
                    });
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function generateAncillaryRevenueTable() {
            const fbRevenues = [5000, 10000, 15000, 20000, 25000];
            const proShopRevenues = [10000, 15000, 20000, 25000, 30000];
            const tbody = document.getElementById('ancillaryRevenueBody');
            
            tbody.innerHTML = '';
            
            fbRevenues.forEach(fbRev => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = '€' + (fbRev/1000) + 'k';
                row.appendChild(headerCell);
                
                // Data cells
                proShopRevenues.forEach(proRev => {
                    const cell = document.createElement('td');
                    
                    // Calculate total revenue for this combination
                    const totalRevenue = calculateTotalRevenueForParams({
                        fbRevenue: fbRev,
                        proShopRevenue: proRev
                    });
                    
                    cell.textContent = formatCurrency(totalRevenue);
                    cell.className = getRevenueColorClass(totalRevenue);
                    cell.dataset.fb = fbRev;
                    cell.dataset.proshop = proRev;
                    
                    // Add click handler
                    cell.addEventListener('click', () => {
                        applyAncillaryParams(fbRev, proRev);
                    });
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function generateFinancingROITable() {
            const interestRates = [2, 3, 4, 5, 6, 7, 8];
            const financingPercentages = [0, 20, 40, 60, 80];
            const tbody = document.getElementById('financingROIBody');
            
            tbody.innerHTML = '';
            
            interestRates.forEach(rate => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = rate + '%';
                row.appendChild(headerCell);
                
                // Data cells
                financingPercentages.forEach(financing => {
                    const cell = document.createElement('td');
                    
                    // Calculate equity ROI for this combination
                    const equityROI = calculateEquityROIForParams({
                        financingPercentage: financing / 100,
                        interestRate: rate / 100
                    });
                    
                    cell.textContent = equityROI.toFixed(1) + '%';
                    cell.className = getROIColorClass(equityROI);
                    cell.dataset.rate = rate;
                    cell.dataset.financing = financing;
                    
                    // Add click handler
                    cell.addEventListener('click', () => {
                        applyFinancingParams(financing, rate);
                    });
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function generateFinancingIRRTable() {
            const interestRates = [2, 3, 4, 5, 6, 7, 8];
            const financingPercentages = [0, 20, 40, 60, 80];
            const tbody = document.getElementById('financingIRRBody');
            
            tbody.innerHTML = '';
            
            interestRates.forEach(rate => {
                const row = document.createElement('tr');
                
                // Row header
                const headerCell = document.createElement('td');
                headerCell.className = 'row-header';
                headerCell.textContent = rate + '%';
                row.appendChild(headerCell);
                
                // Data cells
                financingPercentages.forEach(financing => {
                    const cell = document.createElement('td');
                    
                    // Calculate equity IRR for this combination
                    const equityIRR = calculateEquityIRRForParams({
                        financingPercentage: financing / 100,
                        interestRate: rate / 100
                    });
                    
                    cell.textContent = equityIRR.toFixed(1) + '%';
                    cell.className = getIRRColorClass(equityIRR);
                    cell.dataset.rate = rate;
                    cell.dataset.financing = financing;
                    
                    // Add click handler
                    cell.addEventListener('click', () => {
                        applyFinancingParams(financing, rate);
                    });
                    
                    row.appendChild(cell);
                });
                
                tbody.appendChild(row);
            });
        }

        function calculateProfitForParams(params) {
            // Get current parameters with error handling
            const requiredElements = [
                'numCourts', 'costPerCourt', 'infrastructureCost', 'additionalFacilities',
                'hourlyRate', 'occupancyRate', 'hoursPerDay', 'daysPerYear', 'landRental',
                'maintenancePerCourt', 'managerSalary', 'instructorSalary', 'receptionSalary',
                'maintenanceStaffSalary', 'proShopRevenue', 'fbRevenue', 'eventsPerYear',
                'revenuePerEvent', 'waterCost', 'electricityCost'
            ];
            
            // Check if all required elements exist
            const missingElements = requiredElements.filter(id => !document.getElementById(id));
            if (missingElements.length > 0) {
                console.error('Missing elements for calculation:', missingElements);
                return null;
            }
            
            const currentParams = {
                numCourts: parseInt(document.getElementById('numCourts').value),
                costPerCourt: parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)),
                infrastructureCost: parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)),
                additionalFacilities: parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value)),
                hourlyRate: params.hourlyRate || parseFloat(document.getElementById('hourlyRate').value),
                occupancyRate: (params.occupancyRate || parseFloat(document.getElementById('occupancyRate').value)) / 100,
                hoursPerDay: parseInt(document.getElementById('hoursPerDay').value),
                daysPerYear: parseInt(unformatNumberInput(document.getElementById('daysPerYear').value)),
                landRental: parseFloat(unformatNumberInput(document.getElementById('landRental').value)),
                maintenancePerCourt: parseFloat(unformatNumberInput(document.getElementById('maintenancePerCourt').value)),
                managerSalary: parseFloat(unformatNumberInput(document.getElementById('managerSalary').value)),
                instructorSalary: parseFloat(unformatNumberInput(document.getElementById('instructorSalary').value)),
                receptionSalary: parseFloat(unformatNumberInput(document.getElementById('receptionSalary').value)),
                maintenanceStaffSalary: parseFloat(unformatNumberInput(document.getElementById('maintenanceStaffSalary').value)),
                proShopRevenue: parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value)),
                fbRevenue: parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value)),
                eventsPerYear: parseInt(unformatNumberInput(document.getElementById('eventsPerYear').value)),
                revenuePerEvent: parseFloat(unformatNumberInput(document.getElementById('revenuePerEvent').value))
            };

            // Override with sensitivity parameters
            if (params.numCourts) currentParams.numCourts = params.numCourts;
            if (params.occupancyRate) currentParams.occupancyRate = params.occupancyRate / 100;
            if (params.hourlyRate) currentParams.hourlyRate = params.hourlyRate;
            if (params.additionalFacilities !== undefined) currentParams.additionalFacilities = params.additionalFacilities;
            if (params.fbRevenue !== undefined) currentParams.fbRevenue = params.fbRevenue;
            if (params.proShopRevenue !== undefined) currentParams.proShopRevenue = params.proShopRevenue;

            const courtRentalRevenue = currentParams.numCourts * currentParams.hourlyRate * currentParams.hoursPerDay * 
                                      currentParams.daysPerYear * currentParams.occupancyRate;
            const eventsRevenue = currentParams.eventsPerYear * currentParams.revenuePerEvent;
            const totalRevenue = courtRentalRevenue + currentParams.proShopRevenue + 
                                currentParams.fbRevenue + eventsRevenue;

            const maintenanceCost = currentParams.numCourts * currentParams.maintenancePerCourt;
            const totalSalaries = currentParams.managerSalary + currentParams.instructorSalary + 
                                 currentParams.receptionSalary + currentParams.maintenanceStaffSalary;
            // Scale utilities with number of courts (60% fixed, 40% per court)
            const baseWaterCost = parseFloat(unformatNumberInput(document.getElementById('waterCost').value));
            const baseElectricityCost = parseFloat(unformatNumberInput(document.getElementById('electricityCost').value));
            const baseNumCourts = 8; // Default courts for baseline costs
            
            const waterCost = baseWaterCost * (0.6 + 0.4 * (currentParams.numCourts / baseNumCourts));
            const electricityCost = baseElectricityCost * (0.6 + 0.4 * (currentParams.numCourts / baseNumCourts));
            
            const totalOperatingCosts = currentParams.landRental + maintenanceCost + totalSalaries + waterCost + electricityCost;

            return totalRevenue - totalOperatingCosts;
        }

        function calculatePaybackForParams(params) {
            const profit = calculateProfitForParams(params);
            const investment = (params.numCourts || parseInt(document.getElementById('numCourts').value)) * 
                              parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)) +
                              parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)) +
                              parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value));
            
            return profit > 0 ? investment / profit : 99; // Return high number if no profit
        }

        function getProfitColorClass(profit) {
            if (profit < 100000) return 'profit-low';
            if (profit < 400000) return 'profit-medium';
            return 'profit-high';
        }

        function getPaybackColorClass(payback) {
            if (payback > 5) return 'payback-slow';
            if (payback > 2) return 'payback-moderate';
            return 'payback-fast';
        }

        function calculateROIForParams(params) {
            const profit = calculateProfitForParams(params);
            const courts = params.numCourts || parseInt(document.getElementById('numCourts').value);
            const investment = courts * 
                              parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)) +
                              parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)) +
                              parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value));
            
            return profit > 0 ? (profit / investment) * 100 : 0;
        }

        function calculateTotalRevenueForParams(params) {
            // Get current parameters and merge with provided params
            const currentParams = {
                numCourts: parseInt(document.getElementById('numCourts').value),
                hourlyRate: parseInt(document.getElementById('hourlyRate').value),
                occupancyRate: parseInt(document.getElementById('occupancyRate').value),
                fbRevenue: parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value)),
                proShopRevenue: parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value)),
                ...params
            };

            // Calculate court rental revenue
            const hoursPerDay = 12;
            const daysPerYear = 365;
            const totalHoursPerYear = currentParams.numCourts * hoursPerDay * daysPerYear;
            const occupiedHours = totalHoursPerYear * (currentParams.occupancyRate / 100);
            const courtRentalRevenue = occupiedHours * currentParams.hourlyRate;

            // Events revenue (10% of court rental)
            const eventRevenue = courtRentalRevenue * 0.1;

            return courtRentalRevenue + currentParams.proShopRevenue + currentParams.fbRevenue + eventRevenue;
        }

        function getROIColorClass(roi) {
            if (roi < 30) return 'profit-low';
            if (roi < 80) return 'profit-medium';
            return 'profit-high';
        }

        function getInvestmentProfitColorClass(profit) {
            if (profit < 200000) return 'profit-low';
            if (profit < 500000) return 'profit-medium';
            return 'profit-high';
        }

        function getRevenueColorClass(revenue) {
            if (revenue < 600000) return 'profit-low';
            if (revenue < 800000) return 'profit-medium';
            return 'profit-high';
        }

        function getIRRColorClass(irr) {
            if (irr < 20) return 'profit-low';
            if (irr < 40) return 'profit-medium';
            return 'profit-high';
        }

        function calculateEquityROIForParams(params) {
            // Get current parameters and merge with provided params
            const currentParams = {
                numCourts: parseInt(document.getElementById('numCourts').value),
                costPerCourt: parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)),
                infrastructureCost: parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)),
                additionalFacilities: parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value)),
                hourlyRate: parseFloat(document.getElementById('hourlyRate').value),
                occupancyRate: parseFloat(document.getElementById('occupancyRate').value) / 100,
                hoursPerDay: parseInt(document.getElementById('hoursPerDay').value),
                daysPerYear: parseInt(document.getElementById('daysPerYear').value),
                landRental: parseFloat(unformatNumberInput(document.getElementById('landRental').value)),
                maintenancePerCourt: parseFloat(unformatNumberInput(document.getElementById('maintenancePerCourt').value)),
                waterCost: parseFloat(unformatNumberInput(document.getElementById('waterCost').value)),
                electricityCost: parseFloat(unformatNumberInput(document.getElementById('electricityCost').value)),
                managerSalary: parseFloat(unformatNumberInput(document.getElementById('managerSalary').value)),
                instructorSalary: parseFloat(unformatNumberInput(document.getElementById('instructorSalary').value)),
                receptionSalary: parseFloat(unformatNumberInput(document.getElementById('receptionSalary').value)),
                maintenanceStaffSalary: parseFloat(unformatNumberInput(document.getElementById('maintenanceStaffSalary').value)),
                proShopRevenue: parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value)),
                fbRevenue: parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value)),
                eventsPerYear: parseInt(document.getElementById('eventsPerYear').value),
                revenuePerEvent: parseFloat(unformatNumberInput(document.getElementById('revenuePerEvent').value)),
                // Merge with provided params
                financingPercentage: params.financingPercentage !== undefined ? params.financingPercentage : parseFloat(document.getElementById('financingPercentage').value) / 100,
                interestRate: params.interestRate !== undefined ? params.interestRate : parseFloat(document.getElementById('interestRate').value) / 100,
                loanTerm: parseInt(document.getElementById('loanTerm').value),
                developmentMonths: parseInt(document.getElementById('developmentMonths').value),
                developmentInterest: document.getElementById('developmentInterest').value
            };
            
            // Calculate similar to main calculateModel function
            const totalInvestment = (currentParams.numCourts * currentParams.costPerCourt) + currentParams.infrastructureCost + currentParams.additionalFacilities;
            const courtRentalRevenue = currentParams.numCourts * currentParams.hourlyRate * currentParams.hoursPerDay * 
                                      currentParams.daysPerYear * currentParams.occupancyRate;
            const eventRevenue = currentParams.eventsPerYear * currentParams.revenuePerEvent;
            const totalRevenue = courtRentalRevenue + currentParams.proShopRevenue + currentParams.fbRevenue + eventRevenue;
            
            const totalMaintenance = currentParams.numCourts * currentParams.maintenancePerCourt;
            const totalSalaries = currentParams.managerSalary + currentParams.instructorSalary + 
                                currentParams.receptionSalary + currentParams.maintenanceStaffSalary;
            const totalExpenses = currentParams.landRental + totalMaintenance + totalSalaries + currentParams.waterCost + currentParams.electricityCost;
            
            // Financing calculations
            const loanAmount = totalInvestment * currentParams.financingPercentage;
            const equityInvestment = totalInvestment - loanAmount;
            
            const developmentInterestTotal = calculateDevelopmentInterest(
                loanAmount, 
                currentParams.interestRate, 
                currentParams.developmentMonths, 
                currentParams.developmentInterest === 'capitalized'
            );
            
            const adjustedLoanAmount = currentParams.developmentInterest === 'capitalized' 
                ? loanAmount + developmentInterestTotal 
                : loanAmount;
            
            const monthlyLoanPayment = calculateLoanPayment(adjustedLoanAmount, currentParams.interestRate, currentParams.loanTerm);
            const annualDebtService = monthlyLoanPayment * 12;
            
            const netProfit = totalRevenue - totalExpenses;
            const netCashFlow = netProfit - annualDebtService;
            
            return equityInvestment > 0 ? (netCashFlow / equityInvestment) * 100 : 0;
        }

        function calculateEquityIRRForParams(params) {
            // Similar to calculateEquityROIForParams but returns IRR
            const currentParams = {
                numCourts: parseInt(document.getElementById('numCourts').value),
                costPerCourt: parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)),
                infrastructureCost: parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)),
                additionalFacilities: parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value)),
                hourlyRate: parseFloat(document.getElementById('hourlyRate').value),
                occupancyRate: parseFloat(document.getElementById('occupancyRate').value) / 100,
                hoursPerDay: parseInt(document.getElementById('hoursPerDay').value),
                daysPerYear: parseInt(document.getElementById('daysPerYear').value),
                landRental: parseFloat(unformatNumberInput(document.getElementById('landRental').value)),
                maintenancePerCourt: parseFloat(unformatNumberInput(document.getElementById('maintenancePerCourt').value)),
                waterCost: parseFloat(unformatNumberInput(document.getElementById('waterCost').value)),
                electricityCost: parseFloat(unformatNumberInput(document.getElementById('electricityCost').value)),
                managerSalary: parseFloat(unformatNumberInput(document.getElementById('managerSalary').value)),
                instructorSalary: parseFloat(unformatNumberInput(document.getElementById('instructorSalary').value)),
                receptionSalary: parseFloat(unformatNumberInput(document.getElementById('receptionSalary').value)),
                maintenanceStaffSalary: parseFloat(unformatNumberInput(document.getElementById('maintenanceStaffSalary').value)),
                proShopRevenue: parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value)),
                fbRevenue: parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value)),
                eventsPerYear: parseInt(document.getElementById('eventsPerYear').value),
                revenuePerEvent: parseFloat(unformatNumberInput(document.getElementById('revenuePerEvent').value)),
                financingPercentage: params.financingPercentage !== undefined ? params.financingPercentage : parseFloat(document.getElementById('financingPercentage').value) / 100,
                interestRate: params.interestRate !== undefined ? params.interestRate : parseFloat(document.getElementById('interestRate').value) / 100,
                loanTerm: parseInt(document.getElementById('loanTerm').value),
                developmentMonths: parseInt(document.getElementById('developmentMonths').value),
                developmentInterest: document.getElementById('developmentInterest').value
            };

            // Calculate cash flows and IRR similar to main function
            const totalInvestment = (currentParams.numCourts * currentParams.costPerCourt) + currentParams.infrastructureCost + currentParams.additionalFacilities;
            const courtRentalRevenue = currentParams.numCourts * currentParams.hourlyRate * currentParams.hoursPerDay * 
                                      currentParams.daysPerYear * currentParams.occupancyRate;
            const eventRevenue = currentParams.eventsPerYear * currentParams.revenuePerEvent;
            const totalRevenue = courtRentalRevenue + currentParams.proShopRevenue + currentParams.fbRevenue + eventRevenue;
            
            const totalMaintenance = currentParams.numCourts * currentParams.maintenancePerCourt;
            const totalSalaries = currentParams.managerSalary + currentParams.instructorSalary + 
                                currentParams.receptionSalary + currentParams.maintenanceStaffSalary;
            const totalExpenses = currentParams.landRental + totalMaintenance + totalSalaries + currentParams.waterCost + currentParams.electricityCost;
            
            const loanAmount = totalInvestment * currentParams.financingPercentage;
            const equityInvestment = totalInvestment - loanAmount;
            
            const developmentInterestTotal = calculateDevelopmentInterest(
                loanAmount, 
                currentParams.interestRate, 
                currentParams.developmentMonths, 
                currentParams.developmentInterest === 'capitalized'
            );
            
            const adjustedLoanAmount = currentParams.developmentInterest === 'capitalized' 
                ? loanAmount + developmentInterestTotal 
                : loanAmount;
            
            const monthlyLoanPayment = calculateLoanPayment(adjustedLoanAmount, currentParams.interestRate, currentParams.loanTerm);
            const annualDebtService = monthlyLoanPayment * 12;
            
            const netProfit = totalRevenue - totalExpenses;
            const netCashFlow = netProfit - annualDebtService;
            
            // Calculate equity cash flows for IRR
            const equityCashFlows = [];
            equityCashFlows.push(-equityInvestment);
            
            // Add development interest if paid monthly
            if (currentParams.developmentInterest === 'paid' && currentParams.developmentMonths > 0) {
                const monthlyInterest = loanAmount * (currentParams.interestRate / 12);
                equityCashFlows[0] -= (monthlyInterest * currentParams.developmentMonths);
            }
            
            // Years 1 to projectPeriod: Operational cash flows
            for (let year = 1; year <= parseInt(document.getElementById('projectPeriod').value); year++) {
                equityCashFlows.push(netCashFlow);
            }
            
            try {
                if (equityInvestment > 0) {
                    const irr = calculateIRR(equityCashFlows) * 100;
                    return isNaN(irr) || !isFinite(irr) ? 0 : irr;
                }
                return 0;
            } catch (e) {
                return 0;
            }
        }

        function applyFinancingParams(financing, rate) {
            document.getElementById('financingPercentage').value = financing;
            document.getElementById('interestRate').value = rate;
            updateRangeDisplays();
            updateAll();
            updateSensitivityHighlights();
            showToast(`Applied ${financing}% financing at ${rate}% interest`);
        }

        function applySensitivityParams(occupancy, rate) {
            document.getElementById('occupancyRate').value = occupancy;
            document.getElementById('hourlyRate').value = rate;
            updateRangeDisplays();
            updateAll();
            updateSensitivityHighlights();
        }

        function applyCourtsParams(courts, occupancy) {
            document.getElementById('numCourts').value = courts;
            document.getElementById('occupancyRate').value = occupancy;
            updateRangeDisplays();
            updateAll();
            updateSensitivityHighlights();
        }

        function applyPriceParams(rate, occupancy) {
            document.getElementById('hourlyRate').value = rate;
            document.getElementById('occupancyRate').value = occupancy;
            updateRangeDisplays();
            updateAll();
            updateSensitivityHighlights();
        }

        function applyCourtsRateParams(courts, rate) {
            document.getElementById('numCourts').value = courts;
            document.getElementById('hourlyRate').value = rate;
            updateRangeDisplays();
            updateAll();
            updateSensitivityHighlights();
        }

        function applyInvestmentParams(additionalFacilities, rate, occupancy) {
            document.getElementById('additionalFacilities').value = formatNumberInput(additionalFacilities);
            document.getElementById('hourlyRate').value = rate;
            document.getElementById('occupancyRate').value = occupancy;
            updateRangeDisplays();
            updateAll();
            updateSensitivityHighlights();
        }

        function applyAncillaryParams(fbRevenue, proShopRevenue) {
            document.getElementById('fbRevenue').value = formatNumberInput(fbRevenue);
            document.getElementById('proShopRevenue').value = formatNumberInput(proShopRevenue);
            updateAll();
            updateSensitivityHighlights();
        }

        function updateSensitivityHighlights() {
            const currentOccupancy = parseInt(document.getElementById('occupancyRate').value);
            const currentRate = parseInt(document.getElementById('hourlyRate').value);
            const currentCourts = parseInt(document.getElementById('numCourts').value);

            // Clear previous highlights
            document.querySelectorAll('.sensitivity-table td.current-params').forEach(td => {
                td.classList.remove('current-params');
            });

            // Highlight current params in occupancy-price table
            const occupancyPriceTable = document.getElementById('occupancyPriceTable');
            occupancyPriceTable.querySelectorAll('td[data-occupancy][data-rate]').forEach(td => {
                if (parseInt(td.dataset.occupancy) === currentOccupancy && 
                    parseInt(td.dataset.rate) === currentRate) {
                    td.classList.add('current-params');
                }
            });

            // Highlight current params in price-occupancy table
            const priceOccupancyTable = document.getElementById('priceOccupancyTable');
            if (priceOccupancyTable) {
                priceOccupancyTable.querySelectorAll('td[data-rate][data-occupancy]').forEach(td => {
                    if (parseInt(td.dataset.rate) === currentRate && 
                        parseInt(td.dataset.occupancy) === currentOccupancy) {
                        td.classList.add('current-params');
                    }
                });
            }
        }

        // Show toast notification
        // Bank Presentation specific functions
        function downloadPresentation() {
            const results = calculateModel();
            const presentationData = {
                projectName: "Premium Padel Court Facility - Limassol, Cyprus",
                date: new Date().toLocaleDateString(),
                totalInvestment: formatCurrency(results.totalInvestment),
                financingRequest: formatCurrency(results.loanAmount),
                equityInvestment: formatCurrency(results.equityInvestment),
                projectedROI: results.equityROI.toFixed(1) + '%',
                paybackPeriod: results.paybackPeriod.toFixed(1) + ' years',
                annualRevenue: formatCurrency(results.totalRevenue),
                netProfit: formatCurrency(results.netProfit),
                ltvRatio: results.ltvRatio.toFixed(1) + '%',
                dscr: results.dscr.toFixed(2) + 'x'
            };
            
            const dataStr = JSON.stringify(presentationData, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            const filename = 'padel_bank_presentation_' + new Date().toISOString().slice(0,10) + '.json';
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', filename);
            linkElement.click();
            
            showToast('Bank presentation data downloaded successfully!');
        }
        
        function scheduleCall() {
            const subject = 'Investment Opportunity - Premium Padel Court Facility';
            const body = `Dear Banking Representative,

I would like to schedule a meeting to discuss our investment opportunity for a premium padel court facility in Limassol, Cyprus.

Key Investment Details:
- Total Investment: Looking to secure financing for this exciting sports facility project
- Location: Strategic location in Cyprus with year-round playing conditions
- Market: Growing padel market with strong demand fundamentals

Please let me know your availability for a meeting to discuss this opportunity in detail.

Best regards`;
            
            const mailtoLink = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
            window.open(mailtoLink);
            
            showToast('Email template opened - please complete with bank contact details');
        }

        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            const icon = toast.querySelector('i');
            const messageEl = toast.querySelector('.toast-message');
            
            toast.className = 'toast ' + type;
            messageEl.textContent = message;
            
            if (type === 'success') {
                icon.className = 'fas fa-check-circle';
            } else if (type === 'error') {
                icon.className = 'fas fa-exclamation-circle';
            }
            
            toast.classList.add('show');
            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }

        // Scenario Management Functions
        function saveCurrentScenario() {
            document.getElementById('saveScenarioModal').style.display = 'block';
            document.getElementById('scenarioName').focus();
        }

        function closeSaveScenarioModal() {
            document.getElementById('saveScenarioModal').style.display = 'none';
            document.getElementById('scenarioName').value = '';
            document.getElementById('scenarioDescription').value = '';
        }

        function confirmSaveScenario() {
            const name = document.getElementById('scenarioName').value.trim();
            const description = document.getElementById('scenarioDescription').value.trim();
            
            if (!name) {
                showToast('Please enter a scenario name', 'error');
                return;
            }
            
            const currentScenario = {
                name: name,
                description: description,
                timestamp: new Date().toISOString(),
                parameters: {
                    numCourts: parseInt(document.getElementById('numCourts').value),
                    costPerCourt: parseFloat(unformatNumberInput(document.getElementById('costPerCourt').value)),
                    infrastructureCost: parseFloat(unformatNumberInput(document.getElementById('infrastructureCost').value)),
                    additionalFacilities: parseFloat(unformatNumberInput(document.getElementById('additionalFacilities').value)),
                    hourlyRate: parseFloat(document.getElementById('hourlyRate').value),
                    occupancyRate: parseFloat(document.getElementById('occupancyRate').value),
                    hoursPerDay: parseInt(document.getElementById('hoursPerDay').value),
                    daysPerYear: parseInt(document.getElementById('daysPerYear').value),
                    landRental: parseFloat(unformatNumberInput(document.getElementById('landRental').value)),
                    maintenancePerCourt: parseFloat(unformatNumberInput(document.getElementById('maintenancePerCourt').value)),
                    waterCost: parseFloat(unformatNumberInput(document.getElementById('waterCost').value)),
                    electricityCost: parseFloat(unformatNumberInput(document.getElementById('electricityCost').value)),
                    managerSalary: parseFloat(unformatNumberInput(document.getElementById('managerSalary').value)),
                    instructorSalary: parseFloat(unformatNumberInput(document.getElementById('instructorSalary').value)),
                    receptionSalary: parseFloat(unformatNumberInput(document.getElementById('receptionSalary').value)),
                    maintenanceStaffSalary: parseFloat(unformatNumberInput(document.getElementById('maintenanceStaffSalary').value)),
                    proShopRevenue: parseFloat(unformatNumberInput(document.getElementById('proShopRevenue').value)),
                    fbRevenue: parseFloat(unformatNumberInput(document.getElementById('fbRevenue').value)),
                    eventsPerYear: parseInt(document.getElementById('eventsPerYear').value),
                    revenuePerEvent: parseFloat(unformatNumberInput(document.getElementById('revenuePerEvent').value)),
                    financingPercentage: parseFloat(document.getElementById('financingPercentage').value),
                    interestRate: parseFloat(document.getElementById('interestRate').value),
                    loanTerm: parseInt(document.getElementById('loanTerm').value),
                    developmentMonths: parseInt(document.getElementById('developmentMonths').value),
                    developmentInterest: document.getElementById('developmentInterest').value
                }
            };
            
            // Calculate metrics for this scenario
            const results = calculateModel();
            currentScenario.metrics = {
                totalInvestment: results.totalInvestment,
                netProfit: results.netProfit,
                roi: results.roi,
                equityROI: results.equityROI,
                projectIRR: results.projectIRR,
                equityIRR: results.equityIRR,
                paybackPeriod: results.paybackPeriod,
                equityInvestment: results.equityInvestment,
                annualDebtService: results.annualDebtService
            };
            
            // Save to localStorage
            let savedScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
            
            // Check if name already exists
            const existingIndex = savedScenarios.findIndex(s => s.name === name);
            if (existingIndex !== -1) {
                if (!confirm('A scenario with this name already exists. Do you want to overwrite it?')) {
                    return;
                }
                savedScenarios[existingIndex] = currentScenario;
            } else {
                savedScenarios.push(currentScenario);
            }
            
            localStorage.setItem('customScenarios', JSON.stringify(savedScenarios));
            closeSaveScenarioModal();
            showToast(`Scenario "${name}" saved successfully!`);
            
            // Refresh scenarios grid if modal is open
            if (document.getElementById('scenarioModal').style.display === 'block') {
                loadScenariosInModal();
            }
        }

        function showScenarioManager() {
            document.getElementById('scenarioModal').style.display = 'block';
            loadScenariosInModal();
        }

        function closeScenarioModal() {
            document.getElementById('scenarioModal').style.display = 'none';
        }

        function loadScenariosInModal() {
            const savedScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
            const scenariosList = document.getElementById('scenariosList');
            
            if (savedScenarios.length === 0) {
                scenariosList.innerHTML = '<p style="color: var(--text-secondary); text-align: center; padding: 2rem;">No custom scenarios saved yet.</p>';
                return;
            }
            
            scenariosList.innerHTML = savedScenarios.map((scenario, index) => `
                <div class="scenario-item">
                    <div class="scenario-info">
                        <h4>${scenario.name}</h4>
                        <p>${scenario.description || 'No description'}</p>
                        <p style="font-size: 0.75rem; color: var(--text-light);">
                            Saved: ${new Date(scenario.timestamp).toLocaleString()}
                        </p>
                    </div>
                    <div class="scenario-actions">
                        <button class="btn btn-primary" onclick="loadCustomScenario(${index})">
                            <i class="fas fa-play"></i> Load
                        </button>
                        <button class="btn" onclick="editCustomScenario(${index})">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn" onclick="deleteCustomScenario(${index})" style="background: var(--danger); color: white;">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `).join('');
        }

        function loadCustomScenario(index) {
            const savedScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
            const scenario = savedScenarios[index];
            
            if (!scenario) {
                showToast('Scenario not found', 'error');
                return;
            }
            
            // Load all parameters
            const params = scenario.parameters;
            document.getElementById('numCourts').value = params.numCourts;
            document.getElementById('costPerCourt').value = formatNumberInput(params.costPerCourt);
            document.getElementById('infrastructureCost').value = formatNumberInput(params.infrastructureCost);
            document.getElementById('additionalFacilities').value = formatNumberInput(params.additionalFacilities);
            document.getElementById('hourlyRate').value = params.hourlyRate;
            document.getElementById('occupancyRate').value = params.occupancyRate;
            document.getElementById('hoursPerDay').value = params.hoursPerDay;
            document.getElementById('daysPerYear').value = params.daysPerYear;
            document.getElementById('landRental').value = formatNumberInput(params.landRental);
            document.getElementById('maintenancePerCourt').value = formatNumberInput(params.maintenancePerCourt);
            document.getElementById('waterCost').value = formatNumberInput(params.waterCost);
            document.getElementById('electricityCost').value = formatNumberInput(params.electricityCost);
            document.getElementById('managerSalary').value = formatNumberInput(params.managerSalary);
            document.getElementById('instructorSalary').value = formatNumberInput(params.instructorSalary);
            document.getElementById('receptionSalary').value = formatNumberInput(params.receptionSalary);
            document.getElementById('maintenanceStaffSalary').value = formatNumberInput(params.maintenanceStaffSalary);
            document.getElementById('proShopRevenue').value = formatNumberInput(params.proShopRevenue);
            document.getElementById('fbRevenue').value = formatNumberInput(params.fbRevenue);
            document.getElementById('eventsPerYear').value = params.eventsPerYear;
            document.getElementById('revenuePerEvent').value = formatNumberInput(params.revenuePerEvent);
            document.getElementById('financingPercentage').value = params.financingPercentage;
            document.getElementById('interestRate').value = params.interestRate;
            document.getElementById('loanTerm').value = params.loanTerm;
            document.getElementById('developmentMonths').value = params.developmentMonths;
            document.getElementById('developmentInterest').value = params.developmentInterest;
            
            updateRangeDisplays();
            updateAll();
            closeScenarioModal();
            showToast(`Loaded scenario: ${scenario.name}`);
        }

        function deleteCustomScenario(index) {
            const savedScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
            const scenario = savedScenarios[index];
            
            if (!scenario) return;
            
            if (confirm(`Are you sure you want to delete the scenario "${scenario.name}"?`)) {
                savedScenarios.splice(index, 1);
                localStorage.setItem('customScenarios', JSON.stringify(savedScenarios));
                loadScenariosInModal();
                showToast(`Scenario "${scenario.name}" deleted`);
            }
        }

        function editCustomScenario(index) {
            // Load the scenario first
            loadCustomScenario(index);
            closeScenarioModal();
            
            // Open save modal with existing data
            const savedScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
            const scenario = savedScenarios[index];
            
            document.getElementById('scenarioName').value = scenario.name;
            document.getElementById('scenarioDescription').value = scenario.description || '';
            document.getElementById('saveScenarioModal').style.display = 'block';
        }

        function exportScenarios() {
            const savedScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
            
            if (savedScenarios.length === 0) {
                showToast('No scenarios to export', 'error');
                return;
            }
            
            const dataStr = JSON.stringify(savedScenarios, null, 2);
            const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
            
            const exportFileDefaultName = 'padel_scenarios_' + new Date().toISOString().split('T')[0] + '.json';
            
            const linkElement = document.createElement('a');
            linkElement.setAttribute('href', dataUri);
            linkElement.setAttribute('download', exportFileDefaultName);
            linkElement.click();
            
            showToast(`Exported ${savedScenarios.length} scenarios`);
        }

        function importScenarios(event) {
            const file = event.target.files[0];
            if (!file) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                try {
                    const importedScenarios = JSON.parse(e.target.result);
                    
                    if (!Array.isArray(importedScenarios)) {
                        throw new Error('Invalid format: expected an array of scenarios');
                    }
                    
                    // Validate each scenario has required fields
                    for (let scenario of importedScenarios) {
                        if (!scenario.name || !scenario.parameters) {
                            throw new Error('Invalid scenario format: missing required fields');
                        }
                    }
                    
                    const existingScenarios = JSON.parse(localStorage.getItem('customScenarios') || '[]');
                    const mergedScenarios = [...existingScenarios];
                    let imported = 0;
                    let skipped = 0;
                    
                    for (let scenario of importedScenarios) {
                        const existingIndex = mergedScenarios.findIndex(s => s.name === scenario.name);
                        if (existingIndex !== -1) {
                            // Ask for confirmation to overwrite
                            if (confirm(`Scenario "${scenario.name}" already exists. Overwrite?`)) {
                                mergedScenarios[existingIndex] = scenario;
                                imported++;
                            } else {
                                skipped++;
                            }
                        } else {
                            mergedScenarios.push(scenario);
                            imported++;
                        }
                    }
                    
                    localStorage.setItem('customScenarios', JSON.stringify(mergedScenarios));
                    showToast(`Imported ${imported} scenarios${skipped > 0 ? ', skipped ' + skipped : ''}`);
                    
                    // Refresh modal if open
                    if (document.getElementById('scenarioModal').style.display === 'block') {
                        loadScenariosInModal();
                    }
                    
                } catch (error) {
                    showToast('Error importing scenarios: ' + error.message, 'error');
                }
            };
            
            reader.readAsText(file);
            event.target.value = ''; // Reset file input
        }

        // Close modals when clicking outside
        window.onclick = function(event) {
            const scenarioModal = document.getElementById('scenarioModal');
            const saveScenarioModal = document.getElementById('saveScenarioModal');
            
            if (event.target === scenarioModal) {
                closeScenarioModal();
            }
            if (event.target === saveScenarioModal) {
                closeSaveScenarioModal();
            }
        }

        // Parameter source information data
        const parameterSources = {
            numCourts: {
                title: "Number of Courts",
                explanation: "Industry recommendations suggest 8 courts as optimal for viable operations and efficient facility management.",
                sources: [
                    { text: "Padel Court Profitability Analysis", url: "https://www.porticosport.com/news/padel-court-profitability" },
                    { text: "Business Plan for Padel Centers", url: "https://www.padelcreations.com/business-plan-for-padel/" }
                ]
            },
            costPerCourt: {
                title: "Cost per Court (€35,000)",
                explanation: "Fully equipped court with LED lighting, premium glass walls, and professional installation. Range from €18,000 (basic) to €50,000 (premium).",
                sources: [
                    { text: "Padel Court Construction Costs", url: "https://sportsvenuecalculator.com/knowledge/padel-courts/padel-court-construction-cost/" },
                    { text: "How Much Does It Cost to Build a Padel Court", url: "https://www.porticosport.com/news/how-much-does-it-cost-to-build-a-padel-court" },
                    { text: "Padel Court Cost Analysis", url: "https://www.padel.fyi/blog/padel-court-cost" }
                ]
            },
            infrastructureCost: {
                title: "Infrastructure Cost (€100,000)",
                explanation: "Includes site preparation, foundations, drainage, utilities, parking, and basic amenities for 8-court facility.",
                sources: [
                    { text: "Padel Court Construction Costs", url: "https://sportsvenuecalculator.com/knowledge/padel-courts/padel-court-construction-cost/" },
                    { text: "Complete Padel Facility Development", url: "https://www.porticosport.com/news/how-much-does-it-cost-to-build-a-padel-court" }
                ]
            },
            additionalFacilities: {
                title: "Additional Facilities (€0)",
                explanation: "Optional costs for enhanced F&B facilities, expanded pro shop, or premium amenities beyond basic infrastructure.",
                sources: [
                    { text: "Padel Center Revenue Streams", url: "https://www.padelcreations.com/income-sources-in-a-padel-center/" },
                    { text: "New Padel Clubs Revenue Streams", url: "https://www.nxpadel.com/en/blog/new-padel-clubs-revenue-streams" }
                ]
            },
            hourlyRate: {
                title: "Hourly Rate (€28)",
                explanation: "Based on Cyprus market research: NAIS Sports (€24-32), Tennis Academy Limassol (€30). Conservative €28 average accounts for peak/off-peak pricing.",
                sources: [
                    { text: "NAIS Sports Padel Pricing", url: "https://www.naissports.com/facility/2v2-padel-tennis/" },
                    { text: "Tennis Academy Limassol Padel", url: "https://pitchfinder.io/listing/the-tennis-academy-limassol-padel/" },
                    { text: "NAIS Sports Padel Products", url: "https://www.naissports.com/product-category/padel/" }
                ]
            },
            occupancyRate: {
                title: "Occupancy Rate (50%)",
                explanation: "Industry benchmarks show 40-80% occupancy in first year, with established facilities reaching 70-90% during peak hours. 50% represents realistic conservative estimate.",
                sources: [
                    { text: "Padel Court Profitability", url: "https://www.porticosport.com/news/padel-court-profitability" },
                    { text: "Business Plan for Padel", url: "https://www.padelcreations.com/business-plan-for-padel/" },
                    { text: "New Padel Clubs Revenue Analysis", url: "https://www.nxpadel.com/en/blog/new-padel-clubs-revenue-streams" }
                ]
            },
            hoursPerDay: {
                title: "Operating Hours per Day (12)",
                explanation: "Standard padel facility operations from 8:00 AM to 8:00 PM with LED lighting enabling extended hours during winter months.",
                sources: [
                    { text: "Padel Court Operations Guide", url: "https://www.porticosport.com/news/padel-court-profitability" },
                    { text: "Cyprus Padel Court Installation", url: "https://www.wepadel.com/projects/cyprus-padel-court-installation" }
                ]
            },
            operatingDays: {
                title: "Operating Days per Year (360)",
                explanation: "360 days accounts for weather closures and maintenance days. Cyprus climate allows year-round outdoor operations.",
                sources: [
                    { text: "Cyprus Climate for Padel", url: "https://www.wepadel.com/projects/cyprus-padel-court-installation" },
                    { text: "Padel Court Operations", url: "https://www.porticosport.com/news/padel-court-profitability" }
                ]
            },
            landRental: {
                title: "Annual Land Rental (€120,000)",
                explanation: "Based on Limassol commercial property rates for 10,000m² facility. Competitive rates for sports facility development.",
                sources: [
                    { text: "Limassol Commercial Property", url: "https://www.developerscyprus.com/for-rent/commercial/limassol/" },
                    { text: "Limassol Commercial Space Rental", url: "https://realty.com.cy/rent/limassol/space" },
                    { text: "Vilanos Properties Commercial", url: "https://www.vilanosproperties.com/en-US/forrent/commercials/results.html" }
                ]
            },
            maintenancePerCourt: {
                title: "Maintenance per Court/Year (€2,200)",
                explanation: "Annual maintenance includes surface cleaning, artificial turf care, line repainting, drainage upkeep, and lighting maintenance per court.",
                sources: [
                    { text: "Padel Court Maintenance Costs", url: "https://www.pfsgulf.com/what-are-the-maintenance-costs-associated-with-a-padel-tennis-court/" },
                    { text: "Padel Court Maintenance Guide", url: "https://www.padelmagic.co.uk/padel-news/padel-court-maintenance-costs" },
                    { text: "Padel Court Maintenance", url: "https://padelmagic.es/blog/padel-court-maintenance/" }
                ]
            },
            waterCost: {
                title: "Annual Water Cost (€8,000)",
                explanation: "Water consumption for court cleaning, irrigation of surrounding areas, and facility maintenance based on Cyprus utility rates.",
                sources: [
                    { text: "Cyprus Utility Costs", url: "https://dojobusiness.com/blogs/news/padel-center-budget-utilities" },
                    { text: "Padel Center Operating Costs", url: "https://www.reddit.com/r/padel/comments/14ox30e/thinking_about_padel_club_expenses_does_anyone/" }
                ]
            },
            electricityCost: {
                title: "Annual Electricity Cost (€12,000)",
                explanation: "LED court lighting, facility lighting, HVAC for indoor areas, and equipment operation based on Cyprus commercial electricity rates.",
                sources: [
                    { text: "Cyprus Utility Costs", url: "https://dojobusiness.com/blogs/news/padel-center-budget-utilities" }
                ]
            },
            vatRate: {
                title: "VAT Rate (%)",
                explanation: "Value Added Tax rate in Cyprus. 5% reduced rate applies to licensed sports facilities for admission and booking fees. 19% standard rate applies if no sports operation license is held.",
                sources: [
                    { text: "Cyprus VAT Rates", url: "https://www.vatlive.com/country/cyprus/vat-rates/" }
                ]
            },
            playtomicCommission: {
                title: "Playtomic Commission (%)",
                explanation: "Platform booking commission charged by Playtomic on all court reservations. Industry standard ranges from 2-10%, typically 4% for sports facilities.",
                sources: [
                    { text: "Playtomic for Business", url: "https://playtomic.io/business" }
                ]
            },
            managerSalary: {
                title: "Sports Manager Salary (€42,000)",
                explanation: "Annual salary for experienced sports facility manager in Cyprus, based on local market rates for sports management positions.",
                sources: [
                    { text: "Sports Manager Salary in Cyprus", url: "https://worldsalaries.com/average-sports-manager-salary-in-cyprus/" },
                    { text: "Cyprus Salary Information", url: "https://www.paylab.com/cy/salaryinfo?lang=en" }
                ]
            },
            instructorSalary: {
                title: "Fitness Instructor Salary (€19,800)",
                explanation: "Annual salary for padel instructor/fitness professional in Cyprus market, based on local sports industry rates.",
                sources: [
                    { text: "Fitness Instructor Salary Cyprus", url: "https://www.paylab.com/cy/salaryinfo/education-science-research/fitness-instructor?lang=en" },
                    { text: "Cyprus Employment Guide", url: "https://www.mlsi.gov.cy/mlsi/dl/dl.nsf/All/81BA62406AB06618C22580A50026B974/$file/Employment Guide.pdf" }
                ]
            },
            receptionSalary: {
                title: "Reception Staff Salary (€14,400)",
                explanation: "Annual salary for part-time reception/customer service staff based on Cyprus minimum wage and industry standards.",
                sources: [
                    { text: "Cyprus Salary Information", url: "https://www.paylab.com/cy/salaryinfo?lang=en" },
                    { text: "Cyprus Employment Guide", url: "https://www.mlsi.gov.cy/mlsi/dl/dl.nsf/All/81BA62406AB06618C22580A50026B974/$file/Employment Guide.pdf" }
                ]
            },
            maintenanceStaffSalary: {
                title: "Maintenance Staff Salary (€16,800)",
                explanation: "Annual salary for facility maintenance worker responsible for court upkeep, cleaning, and minor repairs.",
                sources: [
                    { text: "Cyprus Salary Information", url: "https://www.paylab.com/cy/salaryinfo?lang=en" },
                    { text: "Cyprus Employment Guide", url: "https://www.mlsi.gov.cy/mlsi/dl/dl.nsf/All/81BA62406AB06618C22580A50026B974/$file/Employment Guide.pdf" }
                ]
            },
            proShopRevenue: {
                title: "Pro Shop Revenue (€15,000)",
                explanation: "Annual revenue from padel equipment, apparel, and accessories sales. Conservative estimate based on customer traffic and margins.",
                sources: [
                    { text: "Padel Center Income Sources", url: "https://www.padelcreations.com/income-sources-in-a-padel-center/" },
                    { text: "New Padel Clubs Revenue Streams", url: "https://www.nxpadel.com/en/blog/new-padel-clubs-revenue-streams" }
                ]
            },
            fbRevenue: {
                title: "F&B Revenue (€20,000)",
                explanation: "Annual food and beverage sales from snacks, drinks, and light meals. Based on customer visits and average spend per person.",
                sources: [
                    { text: "Padel Center Revenue Streams", url: "https://www.padelcreations.com/income-sources-in-a-padel-center/" },
                    { text: "Padel Club Business Model", url: "https://sheets.market/2025/03/19/padel-club-business-model/" }
                ]
            },
            eventsPerYear: {
                title: "Events per Year (6)",
                explanation: "Conservative estimate of tournaments, corporate events, and social competitions that generate additional revenue beyond regular court bookings.",
                sources: [
                    { text: "Padel Center Hosting Income", url: "https://dojobusiness.com/blogs/news/padel-center-hosting-income" },
                    { text: "New Padel Clubs Revenue Streams", url: "https://www.nxpadel.com/en/blog/new-padel-clubs-revenue-streams" }
                ]
            },
            revenuePerEvent: {
                title: "Revenue per Event (€2,000)",
                explanation: "Average revenue per tournament or corporate event including entry fees, sponsorships, F&B sales, and equipment rentals.",
                sources: [
                    { text: "Padel Center Hosting Income", url: "https://dojobusiness.com/blogs/news/padel-center-hosting-income" },
                    { text: "New Padel Clubs Revenue Analysis", url: "https://www.nxpadel.com/en/blog/new-padel-clubs-revenue-streams" }
                ]
            },
            financingPercentage: {
                title: "Financing Percentage (60%)",
                explanation: "Standard commercial loan coverage for sports facility development. Banks typically finance 60-80% of total project cost.",
                sources: [
                    { text: "How to Finance Your Padel Court", url: "https://www.mejorset.com/eng/blog/how-to-finance-your-padel-court-or-club-expert-guide-by-mejorset" },
                    { text: "Padel Club Construction Financing", url: "https://www.mejorset.com/us-eng/blog/how-to-finance-your-padel-club-construction" }
                ]
            },
            interestRate: {
                title: "Interest Rate (4%)",
                explanation: "Current commercial lending rates in Cyprus for sports facility development, based on ECB rates and local bank margins.",
                sources: [
                    { text: "Cyprus Business Financing", url: "https://www.mejorset.com/eng/blog/how-to-finance-your-padel-court-or-club-expert-guide-by-mejorset" },
                    { text: "Commercial Loan Rates Cyprus", url: "https://www.mejorset.com/us-eng/blog/how-to-finance-your-padel-club-construction" }
                ]
            },
            loanTerm: {
                title: "Loan Term (5 years)",
                explanation: "Standard commercial loan term for sports facility investment, balancing monthly payments with reasonable payback period.",
                sources: [
                    { text: "Padel Court Financing Guide", url: "https://www.mejorset.com/eng/blog/how-to-finance-your-padel-court-or-club-expert-guide-by-mejorset" },
                    { text: "Sports Facility Loan Terms", url: "https://www.mejorset.com/us-eng/blog/how-to-finance-your-padel-club-construction" }
                ]
            },
            projectPeriod: {
                title: "Project Period (5 years)",
                explanation: "Analysis period for ROI calculations and business viability assessment, standard for sports facility investment evaluation.",
                sources: [
                    { text: "Padel Court Profitability Analysis", url: "https://www.porticosport.com/news/padel-court-profitability" },
                    { text: "Business Plan for Padel", url: "https://www.padelcreations.com/business-plan-for-padel/" }
                ]
            }
        };

        // Modal functionality
        function showInfoModal(parameterId) {
            const sourceInfo = parameterSources[parameterId];
            if (!sourceInfo) return;

            const modal = document.getElementById('info-modal');
            const title = document.getElementById('modal-title');
            const explanation = document.getElementById('modal-explanation');
            const sourcesList = document.getElementById('modal-sources');

            title.textContent = sourceInfo.title;
            explanation.textContent = sourceInfo.explanation;

            sourcesList.innerHTML = sourceInfo.sources.map(source => 
                `<li><a href="${source.url}" target="_blank" rel="noopener noreferrer">${source.text}</a></li>`
            ).join('');

            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        function closeInfoModal() {
            const modal = document.getElementById('info-modal');
            modal.style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        // Close modal when clicking overlay
        document.addEventListener('click', function(event) {
            if (event.target.id === 'info-modal') {
                closeInfoModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeInfoModal();
            }
        });

        // Update calculation breakdown
        function updateCalculationBreakdown(results) {
            if (document.getElementById('paramCourts')) {
                document.getElementById('paramCourts').textContent = results.params.numCourts;
                document.getElementById('paramRate').textContent = formatCurrency(results.params.hourlyRate);
                document.getElementById('paramOccupancy').textContent = (results.params.occupancyRate * 100).toFixed(0) + '%';
                document.getElementById('paramHours').textContent = results.params.hoursPerDay;
                document.getElementById('paramDays').textContent = results.params.daysPerYear;
                
                // Update formulas
                document.getElementById('formulaCourtRevenue').textContent = 
                    `${results.params.numCourts} courts × ${formatCurrency(results.params.hourlyRate)}/hr × ${results.params.hoursPerDay} hrs × ${results.params.daysPerYear} days × ${(results.params.occupancyRate * 100).toFixed(0)}% = Gross: ${formatCurrency(results.grossCourtRevenue)} | VAT: -${formatCurrency(results.vatAmount)} | Playtomic: -${formatCurrency(results.playtomicCommissionAmount)} = ${formatCurrency(results.netCourtRevenue)}`;
                document.getElementById('formulaProShop').textContent = formatCurrency(results.params.proShopRevenue);
                document.getElementById('formulaFB').textContent = formatCurrency(results.params.fbRevenue);
                document.getElementById('formulaEvents').textContent = 
                    `${results.params.eventsPerYear} events × ${formatCurrency(results.params.revenuePerEvent)} = ${formatCurrency(results.eventRevenue)}`;
                document.getElementById('formulaTotalRevenue').textContent = formatCurrency(results.totalRevenue);
                
                document.getElementById('formulaLandRental').textContent = formatCurrency(results.params.landRental);
                document.getElementById('formulaMaintenance').textContent = 
                    `${results.params.numCourts} courts × ${formatCurrency(results.params.maintenancePerCourt)} = ${formatCurrency(results.totalMaintenance)}`;
                
                const salaryBreakdown = `${formatCurrency(results.params.managerSalary)} + ${formatCurrency(results.params.instructorSalary)} + ${formatCurrency(results.params.receptionSalary)} + ${formatCurrency(results.params.maintenanceStaffSalary)} = ${formatCurrency(results.totalSalaries)}`;
                document.getElementById('formulaSalaries').textContent = salaryBreakdown;
                
                const utilitiesBreakdown = `${formatCurrency(results.params.waterCost)} + ${formatCurrency(results.params.electricityCost)} = ${formatCurrency(results.params.waterCost + results.params.electricityCost)}`;
                document.getElementById('formulaUtilities').textContent = utilitiesBreakdown;
                document.getElementById('formulaTotalCosts').textContent = formatCurrency(results.totalExpenses);
                
                document.getElementById('formulaNetProfit').textContent = 
                    `${formatCurrency(results.totalRevenue)} - ${formatCurrency(results.totalExpenses)} = ${formatCurrency(results.netProfit)}`;
                document.getElementById('formulaTotalInvestment').textContent = formatCurrency(results.totalInvestment);
                document.getElementById('formulaProjectROI').textContent = 
                    `(${formatCurrency(results.netProfit)} ÷ ${formatCurrency(results.totalInvestment)}) × 100 = ${results.annualROI.toFixed(1)}%`;
                
                document.getElementById('formulaLoanAmount').textContent = 
                    `${formatCurrency(results.totalInvestment)} × ${(results.params.financingPercentage * 100).toFixed(0)}% = ${formatCurrency(results.loanAmount)}`;
                document.getElementById('formulaEquityInvestment').textContent = 
                    `${formatCurrency(results.totalInvestment)} × ${((1 - results.params.financingPercentage) * 100).toFixed(0)}% = ${formatCurrency(results.equityInvestment)}`;
                document.getElementById('formulaDebtService').textContent = 
                    `${formatCurrency(results.annualDebtService)} (${results.params.loanTerm}-year loan at ${(results.params.interestRate * 100).toFixed(1)}%)`;
                document.getElementById('formulaCashFlow').textContent = 
                    `${formatCurrency(results.netProfit)} - ${formatCurrency(results.annualDebtService)} = ${formatCurrency(results.netCashFlow)}`;
                document.getElementById('formulaEquityROI').textContent = 
                    `(${formatCurrency(results.netCashFlow)} ÷ ${formatCurrency(results.equityInvestment)}) × 100 = ${results.annualEquityROI.toFixed(1)}%`;
            }
        }

        // Clear localStorage and reset to defaults
        function clearLocalStorageAndReset() {
            if (confirm('This will reset all parameters to default values and clear any saved settings. Are you sure?')) {
                localStorage.removeItem('padelModelParams');
                localStorage.removeItem('padelModelScenarios');
                
                const defaults = {
                    numCourts: 8, costPerCourt: 35000, infrastructureCost: 100000, additionalFacilities: 200000,
                    hourlyRate: 28, occupancyRate: 50, hoursPerDay: 12, daysPerYear: 360,
                    proShopRevenue: 15000, fbRevenue: 20000, eventsPerYear: 6, revenuePerEvent: 2000,
                    landRental: 120000, maintenancePerCourt: 2200, managerSalary: 42000, instructorSalary: 19800,
                    receptionSalary: 14400, maintenanceStaffSalary: 16800, waterCost: 8000, electricityCost: 15000,
                    vatRate: 5, playtomicCommission: 4,
                    financingPercentage: 60, interestRate: 4, loanTerm: 5, projectPeriod: 5, developmentMonths: 12,
                    developmentInterest: 'capitalized'
                };
                
                Object.keys(defaults).forEach(key => {
                    const element = document.getElementById(key);
                    if (element) {
                        if (element.type === 'range') {
                            element.value = defaults[key];
                            const rangeValue = element.parentNode.querySelector('.range-value');
                            if (rangeValue) {
                                if (key === 'occupancyRate') rangeValue.textContent = defaults[key] + '%';
                                else if (key === 'hourlyRate') rangeValue.textContent = '€' + defaults[key];
                                else if (key === 'interestRate') rangeValue.textContent = defaults[key] + '%';
                                else rangeValue.textContent = defaults[key];
                            }
                        } else if (element.classList && element.classList.contains('amount-input')) {
                            element.value = formatNumberInput(defaults[key]);
                        } else {
                            element.value = defaults[key];
                        }
                    }
                });
                
                updateAll();
                showToast('All settings have been reset to default values!', 'success');
            }
        }

        // Initialize the application when DOM is fully loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Ensure all functions are available globally
            window.switchTab = switchTab;
            window.toggleTheme = toggleTheme;
            window.closeInfoModal = closeInfoModal;
            window.clearLocalStorageAndReset = clearLocalStorageAndReset;
            
            // Initialize the application
            initializeInputs();
        });
    </script>

    <!-- Info Modal -->
    <div id="info-modal" class="modal-overlay">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modal-title"></h3>
                <button class="modal-close" onclick="closeInfoModal()">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div class="modal-section">
                    <h4>Explanation</h4>
                    <p id="modal-explanation"></p>
                </div>
                <div class="modal-section">
                    <h4>Sources</h4>
                    <ul class="sources-list" id="modal-sources"></ul>
                </div>
            </div>
        </div>
    </div>
</body>
</html>